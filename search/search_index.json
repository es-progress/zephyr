{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>This is the comprehensive documentation for Zephyr  -- your companion in streamlining Ubuntu installation and configuration (customization). If you're looking to automate your customization workflow, you've come to the right place!</p>"},{"location":"#what-is-zephyr","title":"What is Zephyr?","text":"<p>Zephyr  is a powerful framework designed to simplify and improve your experience with Ubuntu installation &amp; configuration. It separates the generalized scripts that apply the customizations (Modules) from the configurations they manage (Profiles).</p> <p>Let's see these two core concepts as they tell the most about Zephyr and how it helps.</p>"},{"location":"#profiles","title":"Profiles","text":"<p>You can store your configurations organized into profiles. It's possible to create many different profiles and a default one. If a configuration value is not specified in the selected profile, it falls back to the default. This provides flexibility so you can tailor customization to your needs.</p>"},{"location":"#modules","title":"Modules","text":"<p>Zephyr relies on modules to apply specific configurations and customizations to your system. These modules perform a wide range of tasks, for example:</p> <ul> <li>Install packages (APT, node, pip, snap)</li> <li>Configure applications &amp; tools (Apache, PHP, VirtualBox, Git, dig, ssh, nmap, etc.)</li> <li>Configure GNOME, Bash</li> <li>Set up Linux subsystems (e.g. sudo, cron, systemd)</li> <li>Disk partitioning &amp; formatting</li> <li>Remix Ubuntu</li> </ul> <p>As you might see, the core modules should cover the needs of a web developer, sysadmin, or power user. If you're missing a module, you can roll your own to extend Zephyr's capabilities!</p> <p>Additionally, <code>zephyrctl</code> is included, a handy tool to accomplish these jobs.</p> <p>Also, as Zephyr was written in Bash, there's no dependency (other than Bash ).</p>"},{"location":"#supported-ubuntu-versions","title":"Supported Ubuntu versions","text":"Zephyr version Ubuntu releases supported Released End of life 1.x 20.04 LTS 2024-03-10 2025-07-01 2.x 22.04 LTS 2025-07-01 TBD"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<p>Now that you have a glimpse of what Zephyr is and how it works at its core, let's explore the different sections of our documentation to help you get started on your journey with Zephyr.</p> <p>The Installation Guide will walk you through the process of getting Zephyr up and running on your computer.</p> <p>In the Profiles section, you'll discover how to create and manage customization profiles.</p> <p>Then you can learn how to create your own Ubuntu remix.</p> <p>Are you setting up a fresh system or reinstalling an existing one? The Ubuntu Installation section provides guidance on the pre-installation, installation, and post-installation phases to ensure a smooth Ubuntu setup.</p> <p>Customization is at the heart of Zephyr. In this section, you'll learn how to use modules to customize your system.</p> <p>Finally, the Reference sections provide detailed information about Zephyr settings, zephyrctl and the modules.</p> <p>Note</p> <p>This project is licensed under the GPLv3 license.</p> <p>PRs are always welcomed! </p> <p>DISCLAIMER: Ubuntu is a registered trademark owned by Canonical. Zephyr is NOT affiliated with, endorsed or sponsored by Canonical in any ways.</p>"},{"location":"customize/","title":"Customization","text":"<p>This chapter covers how to use Zephyr  to tailor your Ubuntu installation process by installing packages, applying configurations, and setting up the system in general.</p> <p>This is the essential part, in fact it's the whole point of this project! However, it's the simplest task. </p>"},{"location":"customize/#modules","title":"Modules","text":"<p>Customizations are organized into Modules. Each module is responsible for configuring a specific application, tool, Linux subsystem, system administration job (or even a single setting), or installs a package from a package manager. For a comprehensive list of modules see Reference or the example profile in <code>/example/profiles/default</code> directory.</p> <p>It's also possible to create custom modules if your tools (apps, etc.) are not covered by Zephyr. For details on how to create a module check the <code>other/local</code> module.</p> <p>Basically, customizing means running these modules. It's possible to run all or just one if you wish. You can execute a module multiple times, it will always update to the latest change in the configuration files.</p> <p>When to customize depends on your use. Typically you'll run all modules after a new OS (re)install. Then on a live system, update just the modules which configuration have changed.</p>"},{"location":"customize/#execute-modules","title":"Execute modules","text":"<p>Executing a module is as simple as this:</p> <pre><code>zephyrctl customize PROFILE [MODULE]...\n\nwhere:\nPROFILE            Selected customization profile\nMODULE             Module/category to run (eg. apt, system).\n                   If prefixed with '^', then the module\n                   or the whole category is skipped (e.g ^apt, ^system).\n                   If none given, all modules will be executed.\n</code></pre> <p>For details see Reference.</p> <p>This is the end of the guides. By now, you should be familiar with how Zephyr  works and how it can streamline your Ubuntu installation &amp; configuration workflow.</p> <p>The best way to learn Zephyr is to jump right in and create your first configuration profile and run it! </p> <p>However, if you want to dig deeper into available modules, their configuration options and settings for either Zephyr itself or <code>zephyrctl</code> check the Reference.</p>"},{"location":"install/","title":"Installation","text":"<p>To install Zephyr  locally, clone the Git repository, modify a few configurations (usually unnecessary), run the installer and you're good to go!</p> <p>Below are the detailed installation steps:</p> <ol> <li>Clone the repository from GitHub     <pre><code>cd /path/to/desired/directory\ngit clone https://github.com/es-progress/zephyr.git\n</code></pre></li> <li>(Optional) Configure Zephyr<ol> <li>Check the default configurations in <code>zephyr.cfg</code> or the Reference to understand what you can customize.</li> <li>Make a duplicate of this file and rename it to <code>zephyr.local.cfg</code> <pre><code>cp zephyr.cfg zephyr.local.cfg\n</code></pre></li> <li>Adjust configurations in the local configuration file. Any value provided here will overwrite the defaults in <code>zephyr.cfg</code>. If a setting is not defined, the default value will be applied.</li> </ol> </li> <li>Run the installer, which will:<ul> <li>Set up Bash completion for <code>zephyrctl</code></li> <li>Create a symlink for <code>zephyrctl</code> in <code>/usr/local/bin</code>, making it accessible from anywhere (if <code>/usr/local/bin</code> is in your PATH). <pre><code># Replace ZEPHYR_DIR with the actual path where Zephyr were cloned earlier\ncd ZEPHYR_DIR\n./bin/zephyrctl install\n</code></pre></li> </ul> </li> </ol> <p>And with that, you're all set! Let's rock! </p> <p>If you want to start right away, and explore on your own, run <code>zephyrctl</code> without arguments to view the available commands. If you prefer to get informed first, check the next page to learn about how customization profiles work.</p> <p>If you decide to uninstall Zephyr later (sorry to see you go!), just follow these steps:</p> <ol> <li>Run <code>zephyrctl uninstall</code></li> <li> <p>Delete the Git repository.</p> <p>Note: it may contain your local configuration file or profiles. If you want to preserve that, make a backup before deleting.</p> </li> </ol>"},{"location":"nav/","title":"Nav","text":"<ul> <li>Home</li> <li>Installation</li> <li>Profiles</li> <li>Remix</li> <li>Ubuntu install</li> <li>Customization</li> <li>Know-how<ul> <li>Create boot USB</li> <li>Securely erase disk</li> <li>Rescue system</li> </ul> </li> <li>Reference<ul> <li>Zephyr settings</li> <li>zephyrctl</li> <li>Modules</li> <li>Disk maps</li> </ul> </li> </ul>"},{"location":"profiles/","title":"Profiles","text":"<p>As Profiles are the heart of remixing, this part is very important to fully understand. This makes it a bit longer, but don't worry the rest will be nice &amp; easy after this (they are handled by Zephyr after all). </p>"},{"location":"profiles/#introduction","title":"Introduction","text":"<p>Zephyr  is merely a framework to organize &amp; apply your local configurations. It eliminates manual work but it knows nothing about the actual modifications, customizations and configuration values. All these details are contained in configuration profiles. This way we can separate the generalized scripts that do the heavy lifting and the content they manage.</p> <p>During customization you can choose which profile to use, and the system will get customized according to that. You can design many \"named\" profiles and a default one. If a configuration value is not specified in the selected profile, it will fallback to the default. This allows to have (let's say) different wallpapers on individual machines but your shared configs need to be defined only once in the default profile.</p> <p>Note</p> <p>Currently only two levels of profiles are supported: default and other (named). No OOP-style profile inheritance is possible.</p> <p>You can create just a default profile or a named one, if that approach fits, but all configurations (well, actually the ones you want to run) need to be set in at least one of the profiles.</p> <p>Zephyr will look for profiles in the <code>/profiles</code> directory in the local Git clone (e.g. <code>DIR_ZEPHYR/profiles</code>). This directory is ignored by Git, so you can freely add your configs, updating Zephyr won't mess up your files. Symlinking also works, so you can have your profiles anywhere else just symlink that directory to <code>/profiles</code> and Zephyr will follow links.</p> <p>Tip</p> <p>Store your profiles in a Git repository and symlink your (probably private) config repo to <code>/profiles</code>.</p> <p>This allows you to keep your configurations under version control without interfering with Zephyr.</p>"},{"location":"profiles/#create-profiles","title":"Create profiles","text":"<p>To define a profile, you create a directory in <code>/profiles</code> named as your new profile.</p> <pre><code># This will create a named profile called \"foo\"\ncd ZEPHYR_DIR\nmkdir -p profiles/foo\n</code></pre> <p>You can also create from scratch, but an easier way is to copy the default profile in <code>/example/profiles</code> directory.</p> <pre><code># Use supplied default profile\ncd ZEPHYR_DIR\nmkdir -p profiles\ncp -r example/profiles/default profiles/\n\n# Create a new profile called \"bar\" based on default\ncd ZEPHYR_DIR\nmkdir -p profiles\ncp -r example/profiles/default profiles/bar\n</code></pre>"},{"location":"profiles/#profile-structure","title":"Profile structure","text":"<p>Zephyr consists of different Modules that are responsible to configure a specific application (Virtualbox, Apache etc.), tool (Git, <code>gpg</code> for example), Linux subsystem (like <code>sudo</code> or <code>systemd-resolved</code>), a system administration job (disk partitioning, backing up GPT partition table) or just one particular setting (e.g. GNOME wallpaper). For more about modules see Customizations.</p> <p>Inside profiles configuration files are grouped by category (e.g. apps, system) and then by name of module (e.g. system/netplan, system/shorewall). There are configurations for each module, and each config file or directory has a global and a local counterpart. They use the same syntax and hold the same configurations. The reason for this is to be able to override only parts of a configuration in a named profile. During customization, configuration values are merged from the named and the default profile.</p> <p>Typically you would place your global files in the default profile and local files in named profiles. But you can have global files on named profile also, in this case the global config file will be ignored in default profile. You can mix global/local files in any profile (including default) to achieve your goals.</p> <p>Abstract</p> <p>Check profiles in <code>/example/profiles/default</code> and <code>/example/profiles/tester</code> for examples on using global and local config files.</p> <p>Also each available configuration is present in the default example profile with a short description. For more details about configurations see Reference.</p> <p>Happy profiling! </p> <p>Now, once your profiles are ready , you can remix Ubuntu and create your custom ISO file! Alternatively, if you just want to update any module on a live system go to Customizations.</p>"},{"location":"remix/","title":"Remixing","text":"<p>When your profiles are all set up, the more exciting part comes: the remixing! Now you can create your own Ubuntu remix.</p> <p>Info</p> <p>If you prefer applying your configurations to an existing system, that's perfectly fine as well. In that case you can skip this part and go directly to Customization.</p> <p>Zephyr  with your profiles will be preinstalled on a stock Ubuntu ISO. So, after a fresh install no other setup is needed, applying the customizations can start right away. This results in a smooth (re)install/configure flow. </p> <p>The remixing process is entirely automated; you will only have to run a few <code>zephyrctl</code> commands (as explained later). However, you'll need to choose the Ubuntu ISO file you want to remix.</p> <p>Note</p> <p>Currently, remixing has only been tested with the Ubuntu 20.04 desktop ISO.</p> <p>Additionally, if you have your own scripts for initializing/bootstrapping your workspace or want to embed any other projects/files into the ISO file that's possible too.</p> <p>For this purpose use <code>/payload</code> directory in Zephyr root. It's similar in concept to <code>/profiles</code> dir: it's ignored by Git, so you can copy any payload (files) into this directory (or symlink to any other dir!) it won't disturb Zephyr. That directory and its contents will be packed into the SquashFS filesystem, so they are available when booting from the ISO (live desktop), and they are copied to the freshly installed system too! You can find them in <code>/usr/local/share/zephyr/payload</code> by default, but this can be changed (see <code>INSTALL_DIR</code> config).</p> <p>Besides the payload, you can further customize the remixing, like adding your own preseed files. The configuration files live in the <code>/remix</code> directory. This works similarly to the <code>/profiles</code> and <code>/payload</code> directories.</p> <p>Remixing steps</p> <ol> <li>Download the ISO file that will be remixed (e.g. Ubuntu 20.04 desktop ISO)     <pre><code># There are many methods, in this example I use 'wget'\nwget https://releases.ubuntu.com/20.04.6/ubuntu-20.04.6-desktop-amd64.iso\n</code></pre></li> <li> <p>(Optional) Create preseed files in <code>/remix/preseeds</code> directory.</p> <p>These files will be included in the remixed ISO image, and they can be used to bootstrap the installation process by preseeding the installer with answers to questions it asks. You need to give the preseed file as kernel boot parameter to the installer.</p> <pre><code>linux   /casper/vmlinuz  file=/cdrom/preseed/zephyr.seed maybe-ubiquity quiet splash ---\n</code></pre> <p>Tip</p> <p>In preseed files, an include directive is supported, so you can split your preseed configuration into multiple files. For examples check preseed files in <code>/example/remix/preseeds</code> directory.</p> </li> <li> <p>(Optional) Customize GRUB menu of the remixed ISO.</p> <p>You can override the stock <code>grub.cfg</code> with your own at <code>/remix/grub.cfg</code>. This is useful if you want to add extra boot options (maybe ones with your preseed files as boot options) or change the default boot entry.</p> <p>There's a helper to extract the stock <code>grub.cfg</code> from the ISO file, so you can start from that. Also you can check the example at <code>/example/remix/grub.cfg</code> for inspiration.</p> <pre><code>zephyrctl extract-grub ubuntu-20.04.6-desktop-amd64.iso\n</code></pre> </li> <li> <p>Remix the ISO file</p> <pre><code>zephyrctl remix ubuntu-20.04.6-desktop-amd64.iso\n</code></pre> <p>By default, this will create a remixed ISO file named <code>zephyr.iso</code> in the current directory. This can be configured or you can set a filename on CLI also. For details run <code>zephyrctl help remix</code>.</p> <p>Success</p> <p>If you want install your remix on a virtual machine then you're ready!</p> <p>Just boot from the newly generated ISO.</p> </li> <li> <p>(Optional) Burn the ISO file to a USB-stick, if you want install on a physical machine.</p> <pre><code>zephyrctl burn zephyr.iso\n</code></pre> <p>This will interactively ask for a disk (device file). It's possible to give the disk as a parameter, in this case it will run non-interactively. Also make sure the USB-stick is plugged in. </p> <p>For details execute <code>zephyrctl help burn</code>.</p> <p>Any previous data on the disk will be deleted!</p> <p>There are some safeguards, so hopefully won't overwrite your root filesystem, but please be careful and always double check that the correct device is selected </p> </li> </ol> <p>At this point you have remixed Ubuntu. The next step is Ubuntu installation.</p>"},{"location":"ubuntu/","title":"Installing Ubuntu","text":""},{"location":"ubuntu/#overview","title":"Overview","text":"<p>Most of the time you'll customize a non-freshly installed OS. Chances are, you don't want to reinstall Ubuntu just because you've changed an environment variable or added a new Git alias to your configuration... In this case you can skip this part and see Customization.</p> <p>However, there are some tasks (like partitioning disks) that are best to do before a full reinstall. Also sometimes you might like to start fresh or you've got a new device and want to install and setup Ubuntu. If that's true, you may find this section helpful as Zephyr  can assist with that too!</p> <p>This process consists of  distinctive phases: Pre-installation, Installation and Post-installation. It's mostly the standard (stock) Ubuntu installation (install phase) with some steps before/after that (pre-install, post-install).</p> <p>In pre/post-installation Disk maps play a crucial role. They are just normal configuration files in your profiles and as the name suggest in these files you can describe your disks, partitions and file-systems and let Zephyr know about them.</p> <p>Danger</p> <p>First and foremost, back up all your data!</p> <p>This is a destructive process it will delete all files!</p>"},{"location":"ubuntu/#pre-installation","title":"Pre-installation","text":"<p>After you've backed up all your important files (Are you sure Take a moment to reconsider, don't be sorry later!) you can boot from the remixed USB-stick (that have <code>zephyr.iso</code> burned).</p> <p>If you don't want to partition any disk or let the Ubuntu installer to format partitions you can skip phase.</p> <p>At the end of this phase the actual install is not yet started, however the disks and partitions are partitioned &amp; formatted, so all files will be deleted.</p> <p>Pre-installation steps</p> <ol> <li> Boot from live USB (Zephyr)</li> <li> Try Ubuntu</li> <li>Open Terminal</li> <li>(Optional) This is a good time to securely wipe disks or perform memory cell clearing (only for SSD). This is a manual process.</li> <li> <p>(Optional) Manage disk structure. Partition disks, setup LVM, encrypt with LUKS.    If you don't want to change the disk layout, skip this step.</p> <pre><code># Necessary commands and their order depends on the desired disk architecture\nzephyrctl disk zap PROFILE DISK_MAP...\nzephyrctl disk partition PROFILE DISK_MAP...\nzephyrctl disk encrypt PROFILE DISK_MAP...\nzephyrctl disk lvm PROFILE DISK_MAP...\n\n# Confirm disk structure\nzephyrctl disk info PROFILE DISK_MAP...\n\nwhere:\nPROFILE            Selected customization profile\nDISK_MAP           Disk-map to use\n</code></pre> </li> <li> <p>(Optional) Format partitions</p> <pre><code># Maybe need to open LUKS containers first\nzephyrctl disk decrypt PROFILE DISK_MAP...\n\n# Then format filesystems\nzephyrctl disk format PROFILE DISK_MAP...\n\nwhere:\nPROFILE            Selected customization profile\nDISK_MAP           Disk-map to use\n</code></pre> </li> </ol> <p>You now have clean &amp; empty disks, ready for a fresh install. </p>"},{"location":"ubuntu/#installation","title":"Installation","text":"<p>This is the standard Ubuntu install process.</p> <p>Installation steps</p> <ol> <li> <p>Start installation</p> <pre><code>zephyrctl launch\n</code></pre> </li> <li> <p>Complete forms, settings in GUI</p> </li> <li>After installation ready,  Continue Testing</li> <li>DO NOT REBOOT! </li> </ol> <p>Stock Ubuntu is installed. In the next step we setup Zephyr and prepare for first boot! Yay!</p>"},{"location":"ubuntu/#post-installation","title":"Post-installation","text":"<p>Ubuntu is already installed, but we need to perform the post-installation steps too. Then we will reboot the system and see the first boot (hopefully without any problems! )</p> <p>Post-installation steps</p> <ol> <li> <p>Mount root filesystem to <code>/target</code> if unmounted</p> <pre><code># Check still mounted\nfindmnt /target\n\n# No lines returned --&gt; not mounted --&gt; mount\nsudo mount ROOT_FS_DEVICE /target\n</code></pre> </li> <li> <p>Run post-install</p> <pre><code>zephyrctl post-install install PROFILE DISK_MAP...\n\nwhere:\nPROFILE            Selected customization profile\nDISK_MAP           Disk-map to use\n</code></pre> </li> <li> <p> Reboot system</p> </li> </ol> <p>You're done! You've successfully booted into your brand new system!</p> <p>Now, just one step (actually the most important ) remains: customizing Ubuntu.</p>"},{"location":"know-how/create-boot-usb/","title":"Bootable USB stick","text":"<p>This is how to create a bootable USB drive.</p> <p>Preferably, opt for the same OS for this operation as the bootable USB you want to burn (Windows-stick on Windows, Ubuntu-stick on Ubuntu). It is possible to do it the other way around but it's just more hassle...</p> <p>Before you start, check your USB stick is empty or you've already backed up the files!</p> <p>All files on the drive will be lost!</p> <p>Create backups if necessary and double-check the device name!</p>"},{"location":"know-how/create-boot-usb/#ubuntu-boot","title":"Ubuntu boot","text":"<ol> <li>Download Ubuntu image (ISO file) that you want to install</li> <li>Plug in USB stick, open it and ensure it actually contains what you believe! </li> <li>Create a bootable USB drive for Ubuntu.<ul> <li>on Windows: use Rufus. Usage is pretty straight-forward, but you can find instructions on the site.</li> <li> <p>on Ubuntu</p> <pre><code>dd bs=4M oflag=sync status=progress if=ISO_FILE of=USB_DEVICE\n\nwhere:\nISO_FILE            Ubuntu image file\nUSB_DEVICE          USB drive device (e.g. /dev/sdb)\n</code></pre> </li> </ul> </li> </ol> <p>Bootable Ubuntu USB drive is ready!</p>"},{"location":"know-how/create-boot-usb/#windows-boot","title":"Windows boot","text":"<ol> <li>Plug in USB stick, open and confirm its contents match your expectation! </li> <li>Create Windows bootable USB drive<ul> <li>on Windows: use \"MediaCreationTool\", the native Windows tool for this purpose</li> <li>on Ubuntu: it's a bit complicated, but you can use WoeUSB<ol> <li>Download Bash script from WoeUSB releases and make executable     <pre><code>wget https://github.com/WoeUSB/WoeUSB/releases/download/v5.2.4/woeusb-5.2.4.bash\nchmod +x woeusb-5.2.4.bash\n</code></pre></li> <li>Install dependencies     <pre><code>apt install wimtools\n</code></pre></li> <li>Download Windows ISO</li> <li> <p>Burn ISO to USB</p> <pre><code>sudo ./woeusb-5.2.4.bash --device ISO_FILE USB_DEVICE\n\nwhere:\nISO_FILE            Windows image file\nUSB_DEVICE          USB drive device (e.g. /dev/sdb)\n</code></pre> </li> </ol> </li> </ul> </li> </ol> <p>Bootable Windows USB drive is ready!</p>"},{"location":"know-how/erase-disk/","title":"Erase disk","text":"<p>This is how to erase a disk securely.</p> <p>Note</p> <p>This guide is based on the ArchLinux Wiki page for Memory cell clearing and Securely wipe disk.</p> <p>This is a summarized abstract, that contains all essential steps to securely erasing your disks. For more detailed instructions and explanations, please refer to the Wiki.</p> <p>There are cases when you might want to securely wipe a disk. For example, when the device changes hands, you might want to ensure that your sensitive files cannot be recovered. Or you want to restore an SSD drive (Solid State Drive) to its factory default write performance by Memory Cell Clearing.</p> <p>The disk you want to delete must NOT be mounted! If you can't unmount it (e.g. it's mounted at <code>/</code>), you can boot from an Ubuntu USB stick (live image).</p> <p>Data loss alert</p> <p>This warning is a bit silly, as the point of this operation is to wipe the disk and get rid all of the files. But this will actually erase all your data on the disk, so please think twice before you start:</p> <p>Have I backed up everything?</p>"},{"location":"know-how/erase-disk/#memory-cell-clearing-only-for-ssds","title":"Memory cell clearing (Only for SSDs)","text":"<p>Flash-based solid state disks have a very different internal architecture so proper wiping needs Memory cell clearing: reset the SSD to the initial \"clean\" state it was manufactured with. This has the additional benefit, that the original write performance might be achieved again. </p> <p>Danger</p> <p>Do NOT proceed with this if the target drive is not connected directly to a SATA/NVMe interface!</p> <p>Issuing the Secure Erase/Format/Sanitize command on a drive connected via USB or a SAS/RAID card could potentially brick the drive!</p> <p>Steps for SATA SSD drives:</p> <ol> <li> <p>Check if drive security is frozen</p> <pre><code>hdparm -I DEVICE\n\nwhere:\nDEVICE              SSD drive device file (e.g. /dev/sdb)\n</code></pre> </li> <li> <p>If frozen</p> <ul> <li>on a laptop: suspend &amp; wake-up computer</li> <li>on a desktop:<ol> <li>Make SATA port hot-pluggable in BIOS</li> <li>Power off the computer</li> <li>Unplug SATA cable from the drive</li> <li>Boot Ubuntu</li> <li>Plug SATA cable back in</li> </ol> </li> </ul> </li> <li> <p>Enable security by setting a user password</p> <pre><code>hdparm --user-master u --security-set-pass PASS DEVICE\n\nwhere:\nPASS                Master password\nDEVICE              SSD drive device file (e.g. /dev/sdb)\n</code></pre> </li> <li> <p>Issue the ATA Secure Erase command</p> <pre><code>hdparm --user-master u --security-erase PASS DEVICE\n\nwhere:\nPASS                Master password\nDEVICE              SSD drive device file (e.g. /dev/sdb)\n</code></pre> </li> </ol> <p>SATA SSD memory cells reset!</p> <p>Steps for NVMe SSD drives:</p> <ol> <li>Install <code>nvme-cli</code> utility     <pre><code>apt install nvme-cli\n</code></pre></li> <li> <p>Verify what is supported by the drive</p> <pre><code>nvme id-ctrl DEVICE -H | grep \"Format \\|Crypto Erase\\|Sanitize\"\n\nwhere:\nDEVICE              SSD drive device file (e.g. /dev/nvme0)\n</code></pre> </li> <li> <p>Format device</p> <pre><code>nvme format DEVICE -ses 1 -n 1\n\nwhere:\nDEVICE              SSD drive device file (e.g. /dev/nvme0)\n</code></pre> </li> </ol> <p>NVMe SSD memory cells reset!</p>"},{"location":"know-how/erase-disk/#securely-wipe-disk","title":"Securely wipe disk","text":"<ol> <li>List drives &amp; partitions to select disk to delete     <pre><code>lsblk\n</code></pre></li> <li> <p>Info about a drive</p> <pre><code>fdisk -l DEVICE\n\nwhere:\nDEVICE              Disk device file (e.g. /dev/sdb)\n</code></pre> </li> <li> <p>Fill drive with random data</p> <pre><code>dd status=progress bs=1M if=/dev/urandom of=DEVICE\n\nwhere:\nDEVICE              Disk device file (e.g. /dev/sdb)\n</code></pre> <p>It is a slow process!</p> <p>Running times are for reference only, actual time might differ:</p> <ul> <li>NVMe SSD, HDD: 30-40 MB/sec, so for a 1TB drive it takes ~8 hours</li> <li>SATA SSD: 140 MB/sec, that means 84 minutes for a 120GB drive</li> </ul> </li> </ol> <p>Finish! The drive has been securely erased.</p>"},{"location":"know-how/rescue/","title":"System rescue","text":"<p>System Rescue means recovering a system after it has become unbootable or unstable due to some sort of software complication (e.g. you've locked out yourself from <code>sudo</code>... ) or hardware failure. Mostly you want to access the system to recover data or to fix the problem. These two goals need different approaches.</p> <p>In case of a hardware failure, you can remove the drive (provided not your hard-drive is the faulty one ) and connect it to another computer to recover data. If you just need to resolve a software issue, you can boot from a live USB and repair the system from there.</p> <p>Now let's see how to do these.</p>"},{"location":"know-how/rescue/#recover-data","title":"Recover data","text":"<ol> <li>Remove hard-drive and insert to another machine </li> <li> Boot system</li> <li> <p>(If encrypted) Open LUKS container</p> <pre><code>cryptsetup open DEVICE LUKS_CONTAINER\n\nwhere:\nDEVICE              Hard-drive device file (e.g. /dev/sdb)\nLUKS_CONTAINER      Name of the LUKS device (e.g. CRYPT_sdb)\n</code></pre> </li> <li> <p>Mount drive</p> <pre><code>mount DRIVE MOUNT_POINT\n\nwhere:\nDRIVE               Hard-drive device file (e.g. /dev/sdb or /dev/mapper/CRYPT_sdb)\nMOUNT_POINT         Mount point (e.g. /mnt/backup)\n</code></pre> </li> <li> <p>Copy files</p> <pre><code>cp -av MOUNT_POINT/* DESTINATION\n\nwhere:\nMOUNT_POINT         Mount point (e.g. /mnt/backup)\nDESTINATION         Destination directory (e.g. /home/user/backup)\n</code></pre> </li> </ol> <p>Data recovered! </p>"},{"location":"know-how/rescue/#access-system","title":"Access system","text":"<p>This method works if the machine is still bootable without faulty hardware. Basically you boot from a live USB and chroot to the installed system.</p> <ol> <li> Boot from live USB</li> <li> <p>Mount root partition. You can mount anywhere, but I'll use <code>/target</code> in this example.</p> <ol> <li> <p>(If encrypted) Open LUKS container</p> <pre><code>cryptsetup open DEVICE LUKS_CONTAINER\n\nwhere:\nDEVICE              Hard-drive device file (e.g. /dev/sdb)\nLUKS_CONTAINER      Name of the LUKS device (e.g. CRYPT_sdb)\n</code></pre> </li> <li> <p>Create mount point     <pre><code>mkdir /target\n</code></pre></p> </li> <li> <p>Mount drive</p> <pre><code>mount DRIVE /target\n\nwhere:\nDRIVE               Hard-drive device file (e.g. /dev/sdb or /dev/mapper/CRYPT_sdb)\n</code></pre> </li> </ol> </li> <li> <p>Mount device filesystems, so your installed system can access them     <pre><code>ROOT=/target\nfor n in proc sys dev etc/resolv.conf; do mount --rbind --make-rslave /$n \"$ROOT/$n\"; done\n</code></pre></p> </li> <li>Access the installed system     <pre><code>chroot /target\n</code></pre></li> <li>(Optional) Mount other partitions from <code>/etc/fstab</code> <pre><code>mount -a\n</code></pre></li> </ol> <p>System accessed!</p> <p>Now you can do what is needed to fix the issue, the system will behave as if you booted from the installed system.</p> <p>In addition you're <code>root</code>! </p>"},{"location":"reference/configs/","title":"Configurations","text":"<p>This section is about the settings for Zephyr  itself. Do not confuse this with the Customization section, which is about how to apply different configurations and customizations (defined in Profiles) to your system using Zephyr.</p> <p>You can find all Zephyr settings in the <code>zephyr.cfg</code> file. To alter any of these settings, create a copy of this file and modify the parameters as needed. You can store your local config file at various locations. Zephyr searches for it in the following order: in the file set by the environment variable <code>ZEPHYR_CONFIG</code>, <code>/profiles/zephyr.local.cfg</code> or <code>/zephyr.local.cfg</code> in the project root. The first file found will take precedence.</p> <p>Info</p> <p>Configuration files will be sourced by Bash, so you can use Bash syntax to define variables, set values or use environment variables.</p> <p>Here is a list of options with their descriptions.</p>"},{"location":"reference/configs/#install_dir","title":"INSTALL_DIR","text":"<p>This option specifies the installation directory for Zephyr. Default is <code>/usr/local/share/zephyr</code>.</p>"},{"location":"reference/configs/#assets_dir","title":"ASSETS_DIR","text":"<p>Zephyr assets will be stored in this directory. This can include various media or other files that are required. Default is <code>/usr/local/share/zephyr/assets</code>.</p>"},{"location":"reference/configs/#iso_file_name","title":"ISO_FILE_NAME","text":"<p>Default file name for the remixed ISO file when Zephyr crafts a new disk image. This will be used if no explicit file name was given to <code>zephyrctl remix</code> command. Default is <code>zephyr.iso</code>.</p>"},{"location":"reference/configs/#iso_label","title":"ISO_LABEL","text":"<p>The value of this setting determines the label for the remixed ISO file. Default is <code>zephyr</code>.</p>"},{"location":"reference/configs/#module_blacklist","title":"MODULE_BLACKLIST","text":"<p>Comma-separated list of modules to be blacklisted. These modules won't be executed during customization (<code>zephyrctl customize</code>). Modules listed here are practically disabled, they cannot be run, even explicitly requested with <code>zephyrctl customize BLACKLISTED_MODULE</code>. Use this setting to skip modules that are not needed. You can give category names too to blacklist all modules in that category. Default is <code>''</code>.</p>"},{"location":"reference/configs/#module_whitelist","title":"MODULE_WHITELIST","text":"<p>Comma-separated list of modules to be whitelisted. Only these modules are executed during customization if no other module was specified (<code>zephyrctl customize</code>). You can still run any module if requested explicitly with <code>zephyrctl customize NOT_WHITELISTED_MODULE</code>. Use this setting to run only a few selected modules by default. If you just want to disable some modules, use <code>MODULE_BLACKLIST</code> instead. It's possible to set category names also to whitelist all modules in that category. Default is <code>''</code>.</p>"},{"location":"reference/disk-maps/","title":"Disk maps","text":"<p>Disk maps are a way to define disk structure (partitions, LVM, LUKS encryption, filesystems). This will determine how the system is laid out and how the data is stored. You can define complex disk structures like LVM-on-LUKS or LUKS-on-LVM, as well as simple partitioning schemes.</p> <p>They are similar to configuration files for Modules, but there's no global/local distinction as disk maps are always specific to a system. They are found in <code>install/disk-maps</code> directory of a Profile. Disk maps are simple text files. Blank lines and lines starting with <code>#</code> are ignored with INI-like sections, each with its own purpose.</p> <p>You can find example disk maps in the <code>/example/profiles/default/install/disk-maps</code> directory.</p> <p>Now, let's see the different sections of a disk map and their options.</p>"},{"location":"reference/disk-maps/#disks","title":"disks","text":"<p>The first section of a disk map is the <code>disks</code> section, which lists the disks that are present. Each disk is listed on its own line, options are separated by whitespace.</p> <p>Options</p> <ul> <li><code>DISK_NAME</code>: A name for the disk, used to refer to it in the rest of the disk map.</li> <li><code>DEVICE</code>: The device file for the disk, such as <code>/dev/sda</code> or <code>/dev/nvme0n1</code>.</li> <li><code>PART_PREFIX</code>: (Optional) A prefix to be used for the partition device files, such as <code>p</code> in <code>/dev/nvme0n1p1</code>.</li> </ul> <p>Example</p> <pre><code>[disks]\n# DISK_NAME DEVICE       [PART_PREFIX]\nmain        /dev/sda\nssd         /dev/nvme0n1 p\n</code></pre>"},{"location":"reference/disk-maps/#partitions","title":"partitions","text":"<p>The next section (<code>partitions</code>) of a disk map define the partitions for each disk. Each partition is listed on its own line, options are separated by whitespace.</p> <p>Options</p> <ul> <li><code>DISK_NAME</code>: The name of the disk this partition belongs to, as defined in the <code>disks</code> section.</li> <li><code>NUM</code>: The partition number. Use <code>1</code> for the first partition.</li> <li><code>GAP</code>: The gap between the previous partition and this one. You can use <code>K</code> for kibibytes, <code>M</code> for mebibytes, <code>G</code> for gibibytes and so on.</li> <li><code>SIZE</code>: The size of the partition, use the same units as <code>GAP</code>.</li> <li><code>TYPE</code>: The partition type. This affects the partition type code (not the filesystem). Available types:<ul> <li><code>efi</code>: EFI system partition (type code: ef00)</li> <li><code>msr</code>: Microsoft reserved (type code: 0c01)</li> <li><code>win</code>: Microsoft basic data (type code: 0700)</li> <li><code>linux</code>: Linux filesystem (type code: 8300)</li> <li><code>swap</code>: Linux swap partition (type code: 8200)</li> <li><code>luks</code>: Linux LUKS container (type code: 8309)</li> <li>Or any other valid GPT type code</li> </ul> </li> <li><code>LABEL</code>: The label of the partition.</li> <li><code>CRYPT</code>: (Optional) Type of LUKS encryption to use on this partition:<ul> <li><code>luks1</code>: LUKS1 format</li> <li><code>luks2</code>: LUKS2 format</li> <li><code>-</code>: No encryption</li> </ul> </li> <li><code>FILESYSTEM</code>: (Optional) Filesystem to create on the partition:<ul> <li><code>fat32</code>: FAT32 filesystem</li> <li><code>ext4</code>: Linux ext4 filesystem</li> <li><code>swap</code>: Linux swap partition</li> <li><code>ntfs</code>: NTFS filesystem</li> <li><code>msr</code>: Microsoft reserved (special handling)</li> <li><code>-</code>: Don't create a filesystem</li> </ul> </li> </ul> <p>Example</p> <pre><code>[partitions]\n# DISK_NAME NUM  GAP  SIZE TYPE  LABEL          CRYPT FILESYSTEM\nmain          1    0  128M efi   EFI            -     fat32\nmain          2    0  512M luks  CRYPT_BOOT     luks1 ext4\nmain          3  32M   18G luks  CRYPT_PV_MAIN  luks2 -\n\nssd           1    0    2G win   MEDIA          -     ntfs\nssd           2 512M    2G luks  CRYPT_PV_STORE luks2 -\n</code></pre>"},{"location":"reference/disk-maps/#vol-groups","title":"vol-groups","text":"<p>The <code>vol-groups</code> section defines LVM volume groups to be created. Each volume group is listed on its own line, options are separated by whitespace.</p> <p>Options</p> <ul> <li><code>VG_NAME</code>: The volume group name.</li> <li><code>PHYSICAL_VOLUMES</code>: Comma-separated list of partition devices (specified by partition labels) that belong to this volume group. They will be made into physical volumes (PVs) for LVM.</li> </ul> <p>Example</p> <pre><code>[vol-groups]\n# VG_NAME  PHYSICAL_VOLUMES\nvg-main    CRYPT_MAIN\nvg-home    CRYPT_HOME_1,CRYPT_HOME_2\n</code></pre>"},{"location":"reference/disk-maps/#volumes","title":"volumes","text":"<p>The <code>volumes</code> section defines logical volumes to be created in each volume group. Each logical volume is listed on its own line, options are separated by whitespace.</p> <p>Options</p> <ul> <li><code>VG_NAME</code>: The volume group name where this logical volume belongs.</li> <li><code>NAME</code>: The logical volume name.</li> <li><code>TYPE</code>: The LVM volume type (e.g., <code>linear</code>, <code>raid1</code>, <code>raid5</code>).</li> <li><code>SIZE</code>: The size of the volume. Can be specified in bytes (K,M,G) or as a percentage of available space (e.g., <code>100%FREE</code>).</li> <li><code>CRYPT</code>: (Optional) Type of LUKS encryption to use on this volume.<ul> <li><code>luks1</code>: LUKS1 format</li> <li><code>luks2</code>: LUKS2 format</li> <li><code>-</code>: No encryption</li> </ul> </li> <li><code>FILESYSTEM</code>: (Optional) Filesystem to create on the volume.<ul> <li><code>fat32</code>: FAT32 filesystem</li> <li><code>ext4</code>: Linux ext4 filesystem</li> <li><code>swap</code>: Linux swap partition</li> <li><code>ntfs</code>: NTFS filesystem</li> <li><code>msr</code>: Microsoft reserved (special handling)</li> <li><code>-</code>: Don't create a filesystem</li> </ul> </li> </ul> <p>Example</p> <pre><code>[volumes]\n# VG_NAME NAME  TYPE       SIZE CRYPT FILESYSTEM\nvg-main   root  linear     100G -     ext4\nvg-main   swap  linear 100%FREE -     swap\nvg-home   home  raid1  100%FREE -     ext4\n</code></pre>"},{"location":"reference/modules/","title":"Modules","text":"<p>This is the reference documentation for the customization modules that are part of Zephyr . These modules allow you to customize your system according to your preferences and usage. They are organized into different categories, such as <code>apps</code>, <code>services</code>, and more.</p> <p>Modules can be configured by Profiles, which are a collection of config files and possibly some other files that are relevant to the module (e.g. <code>.tff</code> files for Fonts module). Module-specific files are located in the directory named after the module, e.g. <code>gnome/fonts</code> for Fonts. Other module settings can be found in the category's config file, e.g. <code>gnome/global.cfg</code>. This file contains headers (<code>[some-header]</code>). The settings and the syntax (format) is varied in each section, though empty lines and lines starting with <code>#</code> are always ignored.</p> <p>All global configuration directory and file have a local counterpart. If there is <code>global</code> in the name of a directory (or file) it can be replaced with <code>local</code> to get the counterpart. For example, <code>gnome/fonts/global.d</code> <code>gnome/fonts/local.d</code> and <code>gnome/global.cfg</code> <code>gnome/local.cfg</code>.</p> <p>Local files don't replace global files, they complement global configuration files as local ones contain extra settings. If you want to override a global setting, you need to add a global file with the same name to the profile (e.g <code>default/other/global.cfg</code> and <code>tester/other/global.cfg</code>). There's one exception to this rule: if a setting is a simple key-value pair (e.g. <code>url</code> in <code>tools/composer</code> module), then the local setting will override the global one.</p> <p>Only the <code>global</code> files will be listed in the documentation for brevity.</p> <p>Note</p> <p>For examples check the profiles in <code>example/profiles</code> directory. A default profile and a named profile is provided with different types of configuration overrides mentioned above.</p>"},{"location":"reference/modules/#application-modules","title":"Application modules","text":"<p>These modules allow you to modify applications according to your usage and preferences.</p>"},{"location":"reference/modules/#jmeter","title":"jmeter","text":"<p>Installation of Apache JMeter, a load-testing testing tool.</p> <p>Configuration</p> <ul> <li><code>apps/global.cfg</code>:<ul> <li><code>jmeter</code>: jmeter script settings. Format: INI-file format.<ul> <li><code>url</code>: download URL</li> <li><code>checksum</code>: SHA512 checksum</li> <li><code>install_dir</code>: installation directory</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#pulse-effects","title":"pulse-effects","text":"<p>Install PulseEffects and manage output audio presets.</p> <p>Configuration</p> <ul> <li><code>apps/pulse-effects/global.d</code>: output presets.</li> </ul>"},{"location":"reference/modules/#vbox","title":"vbox","text":"<p>The module is for installation and the configuration of VirtualBox virtualization software.</p> <p>Tip</p> <p>Only the base <code>virtualbox</code> package is installed by this module. You might want to install <code>virtualbox-qt</code> (the GUI) and <code>virtualbox-guest-additions-iso</code> (for extra functions like shared folders and clipboard between host and guest). Use the <code>packages/apt</code> module for that.</p> <p>Configuration</p> <ul> <li><code>apps/global.cfg</code>:<ul> <li><code>virtualbox</code>:<ul> <li><code>repo</code>: Oracle VirtualBox APT repository</li> <li><code>gpg_key_url</code>: URL to the GPG key file for the repo</li> <li><code>gpg_key_fingerprint</code>: Expected GPG key fingerprint</li> <li><code>version</code>: VirtualBox version to install</li> </ul> </li> <li><code>virtualbox-vboxmanage</code>: Virtualbox settings to apply. Format: \"config_name value\" (one setting per line).</li> <li><code>virtualbox-settings</code>: parameters for vbox script. Currently only <code>VM_LOCAL_DIR</code> (directory for virtual machines) is supported.</li> <li><code>virtualbox-virtmachines</code>: virtual machines definitions. Format: \"virtmachines+=(vm_dir@UUID)\".</li> </ul> </li> <li><code>apps/vbox/vm.global.d</code>: virtual machines definitions. You need to create a sub-directory for each VM and put <code>.vbox</code> files in it.</li> </ul>"},{"location":"reference/modules/#gnome-modules","title":"GNOME modules","text":"<p>These modules allow you to customize and manage different aspects of your GNOME desktop environment.</p>"},{"location":"reference/modules/#autostart","title":"autostart","text":"<p>With the autostart module you can control which applications should start automatically when you log into your GNOME desktop.</p> <p>Configuration</p> <ul> <li><code>gnome/autostart/global.d</code>: <code>.desktop</code> files for each application you wish to autostart.</li> </ul>"},{"location":"reference/modules/#dash-to-panel","title":"dash-to-panel","text":"<p>This module installs the GNOME shell extension Dash to Panel and allows you to customize it.</p> <p>Configuration</p> <ul> <li><code>gnome/dash-to-panel/global.d</code>: <code>.dconf</code> configuration files for Dash to Panel.</li> <li><code>gnome/global.cfg</code>:<ul> <li><code>dash-to-panel</code>: dash-to-panel script settings. Format: INI-file format.<ul> <li><code>version</code>: Dash to Panel extension version to install (git tag to checkout)</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#fonts","title":"fonts","text":"<p>It installs additional fonts.</p> <p>Configuration</p> <ul> <li><code>gnome/fonts/global.d</code>: <code>.tff</code> files for different fonts. Create a sub-directory for each font family and put the <code>.tff</code> files in it.</li> </ul>"},{"location":"reference/modules/#gnome-config","title":"gnome-config","text":"<p>This module provides global configuration options for the GNOME desktop environment.</p> <p>Configuration</p> <ul> <li><code>gnome/config/global.d</code>: you can place your GNOME desktop-wide customization files in this directory (<code>.dconf</code> files).</li> </ul>"},{"location":"reference/modules/#user-dirs","title":"user-dirs","text":"<p>This module is responsible for customizing user directories.</p> <p>Configuration</p> <ul> <li><code>gnome/user-dirs.defaults</code>: this will be your custom <code>/etc/xdg/user-dirs.defaults</code> file.</li> <li><code>gnome/user-dirs.dirs</code>: your custom <code>~/.config/user-dirs.dirs</code> file.</li> <li><code>gnome/global.cfg</code>:<ul> <li><code>bookmarks</code>: Nautilus bookmarks. Format: \"file:///path/to/bookmarked/dir\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#wallpaper","title":"wallpaper","text":"<p>With this module you can set the desktop background.</p> <p>Configuration</p> <ul> <li><code>gnome/wallpaper.jpg</code>: your wallpaper image.</li> </ul>"},{"location":"reference/modules/#install-modules","title":"Install modules","text":"<p>These modules play a role in the post-installation process. They can't be executed independently, all of them will run with <code>zephyrctl post-install</code> command.</p> <p>Note</p> <p>Typically they are used after a fresh installation of the system in the post-installation phase (in this case use the <code>install</code> environment). But they can be executed anytime to reconfigure a live system (<code>live</code> environment), as it is non-destructive.</p>"},{"location":"reference/modules/#backup-gpt","title":"backup-gpt","text":"<p>This backups the GUID Partition Table (GPT) after the disk has been partitioned. In case of an emergency, the partition table can be restored from this backup. It uses Disk maps to determine the disk(s) to backup.</p> <p>Configuration</p> <ul> <li><code>install/global.cfg</code>:<ul> <li><code>backup-gpt</code>: backup-gpt script settings. Format: INI-file format.<ul> <li><code>backup_dir</code>: directory for GPT partition table backups</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#grub-config","title":"grub-config","text":"<p>This module assists in configuring the GRUB bootloader.</p> <p>Configuration</p> <ul> <li><code>install/grub/default</code>: custom GRUB default config file (<code>/etc/default/grub</code>).</li> <li><code>install/grub/global.d/</code>: configuration files for <code>grub-mkconfig</code> (these are shell scripts).</li> </ul>"},{"location":"reference/modules/#luks-automount","title":"luks-automount","text":"<p>With this module you can set up automatic mounting of LUKS encrypted partitions. It creates an additional key to the LUKS partition (machine key) and adds an entry to <code>/etc/crypttab</code> to automatically unlock and mount the partition on boot. It needs Disk maps to find LUKS partitions.</p> <p>You can configure <code>initramfs</code> also.</p> <p>Configuration</p> <ul> <li><code>install/initramfs/global.d/</code>: <code>initramfs-tools</code> configuration files (<code>.conf</code>).</li> <li><code>install/global.cfg</code>:<ul> <li><code>luks</code>: luks-automount script settings. Format: INI-file format.<ul> <li><code>key_dir</code>: directory for LUKS machine keys</li> <li><code>key_slot</code>: key slot number for LUKS machine keys</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#random","title":"random","text":"<p>Assortment of random, non-categorized post-installation tasks.</p> <p>Tasks</p> <ul> <li>select Windowing System to use (e.g. X11 or Wayland)</li> </ul> <p>Configuration</p> <ul> <li><code>install/global.cfg</code>:<ul> <li><code>random</code>: random script settings. Format: INI-file format.<ul> <li><code>window_system</code>: Window System for GNOME, default is <code>wayland</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#other-modules","title":"Other modules","text":"<p>Random, non-categorized modules.</p>"},{"location":"reference/modules/#cron","title":"cron","text":"<p>With this module you can setup weekly and daily cron jobs.</p> <p>Configuration</p> <ul> <li><code>other/global.cfg</code>:<ul> <li><code>cron-hourly</code>: hourly cron jobs. Format: \"script_path job_name\" (one per line).</li> <li><code>cron-daily</code>: daily cron jobs. Format: \"script_path job_name\" (one per line).</li> <li><code>cron-weekly</code>: weekly cron jobs. Format: \"script_path job_name\" (one per line).</li> <li><code>cron-monthly</code>: monthly cron jobs. Format: \"script_path job_name\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#local","title":"local","text":"<p>This module executes your local, custom modules (that are not part of Zephyr).</p> <p>A module is basically an executable file, so you can write your own module in any language you like. If you choose to write your module in Bash, you can use the functions from Zephyr, just source the bootstrap file (<code>${PROJECT_ROOT}/bin/bootstrap.sh</code>) to make them available. It's also possible to define new configuration sections in <code>other/global.cfg</code> and use them in your module. During execution the current working directory will be the script's directory, so you can use relative paths to access files should your module need extra files.</p> <p>For details check the example module in <code>example/profiles/default/other/local/global.d/</code> and study the core Zephyr modules in <code>bin/customize</code>.</p> <p>Configuration</p> <ul> <li><code>other/local/global.d</code>: any executable file in this directory will be run.</li> </ul>"},{"location":"reference/modules/#package-modules","title":"Package modules","text":"<p>With the help of the following modules you can install packages using various package managers.</p>"},{"location":"reference/modules/#apt","title":"apt","text":"<p>The apt module assists with the management of packages using the Debian package manager (APT).</p> <p>It also upgrades all installed packages!</p> <p>Configuration</p> <ul> <li><code>packages/global.cfg</code>:<ul> <li><code>apt-install</code>: APT packages to install. Format: \"package_name apt_repository\" (one per line, apt_repository optional).</li> <li><code>apt-remove</code>: APT packages to remove. Format: \"package_name\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#bin","title":"bin","text":"<p>Shell binaries (or scripts, PHAR files, basically any executable file) to download and install to <code>/usr/local/bin/</code>.</p> <p>Note</p> <p>This module needs the <code>bin_global</code> configuration to be defined in <code>shell/scripts</code> module to work.</p> <p>Configuration</p> <ul> <li><code>packages/global.cfg</code>:<ul> <li><code>bin</code>: shell binaries to install. Format: \"Name URL SHA256SUM\" (one per line, SHA256SUM optional).</li> </ul> </li> </ul>"},{"location":"reference/modules/#node","title":"node","text":"<p>With the node module you can install Node.js packages.</p> <p>Configuration</p> <ul> <li><code>packages/global.cfg</code>:<ul> <li><code>managers</code>: package manager settings. Format: INI-file format.<ul> <li><code>node_version</code>: major version of Node to install e.g. <code>18</code>, <code>20</code>.</li> </ul> </li> <li><code>node</code>: Node modules to install. Format: \"package_name\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#pip","title":"pip","text":"<p>This module is used to manage Python packages installed via pip.</p> <p>Configuration</p> <ul> <li><code>packages/pip.global</code>: pip requirements file.</li> </ul>"},{"location":"reference/modules/#snap","title":"snap","text":"<p>The snap module assists with installing Snap packages.</p> <p>It upgrades installed snaps and purges old revisions.</p> <p>Configuration</p> <ul> <li><code>packages/global.cfg</code>:<ul> <li><code>snap</code>: snaps to install. Format: \"snap_name install_options\" (one per line).   \"install_options\" is an optional comma-separated list of options to pass to <code>snap install</code> without the hyphens (<code>--</code>) e.g. <code>classic,channel=18/stable</code>.</li> </ul> </li> </ul>"},{"location":"reference/modules/#service-modules","title":"Service modules","text":"<p>These modules allow you to configure various services such as database servers, web servers.</p>"},{"location":"reference/modules/#apache","title":"apache","text":"<p>The module is for installation and the configuration of the Apache web server.</p> <p>Note</p> <p>You need to run <code>system/certificate</code> module beforehand to generate self-signed SSL certificates, which will be used by Apache.</p> <p>Configuration</p> <ul> <li><code>services/apache/config.global.d</code>: use this directory to place Apache's configuration files (<code>.conf</code>).</li> <li><code>services/apache/vhost-default.conf</code>: default virtual host file. You can use templated variables like <code>{{ DOC_ROOT }}</code> in this file.   It will be replaced with the actual value configured in <code>services/global.cfg</code>. The following variables are available:<ul> <li><code>DOC_ROOT</code>: web root for virtual hosts</li> <li><code>DEF_VIRT_HOST_NAME</code>: name for default vhost</li> <li><code>ROOT_CA_NAME</code>: root CA name (configured in <code>system/certificate</code> module)</li> </ul> </li> <li><code>services/global.cfg</code>:<ul> <li><code>apache</code>: apache script settings. Format: INI-file format.<ul> <li><code>web_root</code>: web root for virtual hosts</li> <li><code>def_virt_host_name</code>: name for default vhost (which will also be used for certificate and key filenames)</li> <li><code>def_virt_host_subject</code>: default virtual host certificate subject</li> <li><code>def_virt_host_cert_key</code>: (optional) default virtual host certificate private key configuration in format \"algorithm,option1,option2,...\". If not specified, defaults to 4096 bit RSA</li> </ul> </li> <li><code>apache-module</code>: list of Apache modules to enable. Format: \"module_name\" (one per line).</li> <li><code>apache-conf</code>: list of Apache configuration files to enable. Format: \"conf_name\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#mariadb","title":"mariadb","text":"<p>This will install &amp; customize MariaDB database server, including creating an admin user with full privileges.</p> <p>Configuration</p> <ul> <li><code>services/mariadb/global.d</code>: directory for MariaDB's configuration files (<code>.cnf</code>).</li> <li><code>services/global.cfg</code>:<ul> <li><code>mariadb</code>: mariadb script settings. Format: INI-file format.<ul> <li><code>repo</code>: MariaDB APT repository URL</li> <li><code>admin_name</code>: username for MySQL admin user</li> <li><code>admin_pass</code>: password for MySQL admin user</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#php","title":"php","text":"<p>This module will install and configure PHP and start the PHP-FPM service with Apache.</p> <p>Note</p> <p>It expects Apache to be installed. Use the <code>services/apache</code> module to install it!</p> <p>Configuration</p> <ul> <li><code>services/php/global.d</code>: directory for PHP's <code>.ini</code> configuration files.</li> <li><code>services/global.cfg</code>:<ul> <li><code>php</code>: php script settings. Format: INI-file format.<ul> <li><code>version</code>: comma-separated list of PHP versions to install</li> <li><code>cli_version</code>: Single PHP version to be used by PHP CLI</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#phpmyadmin","title":"phpmyadmin","text":"<p>Use this module to install and configure phpMyAdmin. It also creates phpMyAdmin control database &amp; user.</p> <p>Note</p> <p>phpMyAdmin needs a LAMP stack to work, so you need to install Apache, MariaDB and PHP first (see the <code>services/apache</code>, <code>services/mariadb</code> and <code>services/php</code> modules).</p> <p>Configuration</p> <ul> <li><code>services/phpmyadmin/config.inc.php</code>: phpMyAdmin configuration file.</li> <li><code>services/global.cfg</code>:<ul> <li><code>phpmyadmin</code>: php script settings. Format: INI-file format.<ul> <li><code>url</code>: download URL for phpMyAdmin tarball</li> <li><code>checksum</code>: SHA256 checksum for download tar-archive</li> <li><code>service_user</code>: phpMyAdmin control user name</li> <li><code>service_pass</code>: phpMyAdmin control user password</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#shell-modules","title":"Shell modules","text":"<p>Modules to customize Bash and install your custom shell scripts.</p>"},{"location":"reference/modules/#bash","title":"bash","text":"<p>This module is called <code>bash</code> but it could have been called <code>home-dir</code> too, as it setup your whole home directory not just Bash (through <code>.bashrc</code>). Typically you would put your custom <code>.bashrc</code> here, but you can put any file here and it will be copied to your home directory: like <code>.profile</code>, <code>.inputrc</code> etc. In this module there is a difference between <code>global</code> and <code>local</code> files. Global files are installed globally for all users, and local files are installed only for the current user.</p> <p>Configuration</p> <ul> <li><code>shell/bash/global.d</code>: all files here will be copied to your HOME directory, <code>/root</code>, <code>/etc/skel</code> so it will be default for new users and root too.   The directory structure will be preserved, so you can implement your custom directory structure.</li> <li><code>shell/bash/local.d</code>: files in this directory will be copied only to your HOME directory so it's local for the current user only with directory structure preserved.</li> <li><code>shell/bash/root.d</code>: these files will be copied to <code>/root</code> to customize root's Bash only (directory structure preserved).</li> </ul>"},{"location":"reference/modules/#scripts","title":"scripts","text":"<p>This module installs your custom shell scripts to directories that are in your <code>PATH</code> (configurable). In this module there is a difference between <code>global</code> and <code>local</code> files. Global files are installed to <code>/usr/local/bin</code> (by default) - so it's global for all users - and local files are installed to <code>~/.local/bin</code> (by default) - so it's local for the current user only.</p> <p>Configuration</p> <ul> <li><code>shell/bin/global.d</code>: contains system-wide shell scripts.</li> <li><code>shell/bin/local.d</code>: contains shell scripts for the current user.</li> <li><code>shell/lib/global.d</code>: contains system-wide shell libraries.</li> <li><code>shell/lib/local.d</code>: contains shell libraries for the current user.</li> <li><code>shell/global.cfg</code>:<ul> <li><code>scripts</code>: scripts script settings. Format: INI-file format.<ul> <li><code>bin_global</code>: directory for global shell scripts</li> <li><code>bin_local</code>: directory for local shell scripts</li> <li><code>lib_global</code>: directory for global shell library</li> <li><code>lib_local</code>: directory for local shell library</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#system-modules","title":"System modules","text":"<p>The modules under this category are mainly used for customizing system-wide settings and Linux subsystems.</p>"},{"location":"reference/modules/#certificates","title":"certificates","text":"<p>This module handles the generation and installation of a Machine Owner Key (MOK) and self-signed SSL certificates. This certificate is a root Certificate Authority (CA) for the system and can be used to sign other certificates. The CA certificate is installed in the system and Firefox trusted certificate store, so all certificates signed by this CA will be trusted by the system and Firefox. Certificates signed by this CA are used by the <code>services/apache</code> and the <code>services/phpmyadmin</code> module.</p> <p>Configuration</p> <ul> <li><code>system/firefox-policies.json</code>: Firefox policy file.</li> <li><code>system/global.cfg</code>:<ul> <li><code>certificate</code>: certificates script settings. Format: INI-file format.<ul> <li><code>root_ca_key</code>: key configuration for the root CA in format \"algorithm,option1,option2,...\". If not specified, defaults to 4096 bit RSA.</li> <li><code>root_ca_name</code>: self-signed Root Certificate Authority (CA) name</li> <li><code>root_ca_subject</code>: root CA subject</li> <li><code>mok_key_name</code>: Machine Owner Key (MOK) name</li> <li><code>mok_key_subject</code>: MOK subject</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#dirs","title":"dirs","text":"<p>Create directories and set permissions for them.</p> <p>Configuration</p> <ul> <li><code>system/global.cfg</code>:<ul> <li><code>dirs-create</code>: directories to create, you can use variables like <code>$USER</code> as owner. Format: \"path owner\" (one per line, owner optional).</li> <li><code>dirs-remove</code>: directories to delete. Format: \"path\" (one per line).</li> <li><code>perms</code>: permission settings. Format: INI-file format.<ul> <li><code>perm_home</code>: permission to set on $HOME (non-recursive). Use format allowed by <code>chmod</code> command.</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#locale","title":"locale","text":"<p>Configures system locale.</p> <p>Configuration</p> <ul> <li><code>system/global.cfg</code>:<ul> <li><code>locales</code>: locales to install. Format: \"locale_name\" (one per line).</li> <li><code>locale</code>: set locale. You can use different locale in each locale categories. Format: \"category name\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#netplan","title":"netplan","text":"<p>This module is responsible for network plan creation and management (netplan). Also disables connectivity checking.</p> <p>Configuration</p> <ul> <li><code>system/netplan/global.d</code>: place for your network plans (<code>.yaml</code> files).</li> </ul>"},{"location":"reference/modules/#resolved","title":"resolved","text":"<p>Configure the systemd DNS resolver <code>systemd-resolved</code> service.</p> <p>Configuration</p> <ul> <li><code>system/resolved/global.d</code>: <code>systemd</code> service configuration files (<code>.conf</code>).</li> </ul>"},{"location":"reference/modules/#shorewall","title":"shorewall","text":"<p>This is used to install &amp; configure the Shorewall firewall.</p> <p>Note</p> <p>You can use the <code>{{ interface }}</code> string as template in the <code>interfaces</code> file and the module will replace it with the actual interface name.</p> <p>Configuration</p> <ul> <li><code>system/shorewall/global.d</code>: contains files for zones, policy, interfaces and rules.   All files here will be copied to <code>/etc/shorewall/</code> with directory structure preserved.</li> </ul>"},{"location":"reference/modules/#sudo","title":"sudo","text":"<p>Configure <code>sudo</code>.</p> <p>Warning</p> <p>Configuration files will be verified by <code>sudo</code> before they are installed, so syntax errors will be caught.</p> <p>However, be careful with this module, as it can lock you out of <code>sudo</code> if you make a mistake in the configuration files!</p> <p>Configuration</p> <ul> <li><code>system/sudo/global.d</code>: custom <code>sudoers</code> configuration files. These files will be copied to <code>/etc/sudoers.d/</code>.</li> </ul>"},{"location":"reference/modules/#sysctl","title":"sysctl","text":"<p>You can tweak Linux kernel parameters with this module via <code>sysctl</code> configuration files. These changes are permanent, they will survive reboots.</p> <p>Configuration</p> <ul> <li><code>system/sysctl/global.d</code>: place your <code>sysctl</code> configuration files here (<code>.conf</code>).   All files in this directory will be installed to <code>/etc/sysctl.d/</code>.</li> </ul>"},{"location":"reference/modules/#systemd","title":"systemd","text":"<p>This module can install new <code>systemd</code> units (services, timers, etc.) and can override existing units (e.g. <code>fstrim.service</code>).</p> <p>Note</p> <p>This module needs the <code>lib_global</code> configuration to be defined in <code>shell/scripts</code> module to work.</p> <p>Configuration</p> <ul> <li><code>system/systemd/files.global.d</code>: additional files (script, resources) that are needed for units, like an executable for a service. These files will be copied to <code>lib_global</code> dir as configured in <code>shell/scripts</code> module.</li> <li><code>system/systemd/override.global.d</code>: place <code>.conf</code> files for each unit you want to override in a subdirectory named as the unit (e.g. \"fstrim.service\").</li> <li><code>system/systemd/install.global.d</code>: put your new custom unit files here. These will be copied to <code>/usr/local/lib/systemd/system</code>. You can use <code>{{ GLOBAL_LIB }}</code> template string in unit files, it will be replaced with the actual directory. This can be useful in a <code>ExecStart</code> directive.</li> </ul>"},{"location":"reference/modules/#users","title":"users","text":"<p>Create users (normal and system users too) and optionally add them to groups.</p> <p>Configuration</p> <ul> <li><code>system/global.cfg</code>:<ul> <li> <p><code>users</code>: users to add to the system. Format: \"user_name type groups\" (one per line), \"type\" can be <code>normal</code> or <code>system</code> if omitted defaults to <code>normal</code>, \"groups\" is an optional comma-separated list of groups to add the user to. Groups will be created if not exist.   For normal users login will be disabled (so the module can run unattented), to enable the account you will be need to manually set a password later with <code>passwd</code>.</p> <p>You can use environment variables (like <code>$USER</code>) as user name!</p> </li> </ul> </li> </ul>"},{"location":"reference/modules/#tool-modules","title":"Tool modules","text":"<p>The Tool modules provide configurations for various tools.</p>"},{"location":"reference/modules/#composer","title":"composer","text":"<p>This module provides configuration settings for the Composer dependency manager for PHP and installs it globally. Bash completion is also installed.</p> <p>Configuration</p> <ul> <li><code>tools/global.cfg</code>:<ul> <li><code>composer</code>: composer script settings. Format: INI-file format.<ul> <li><code>url</code>: download URL for composer PHAR file</li> <li><code>checksum</code>: SHA256 checksum for downloaded PHAR file</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#dig","title":"dig","text":"<p>Install and configure <code>dig</code> DNS lookup utility.</p> <p>Configuration</p> <ul> <li><code>tools/digrc</code>: your custom <code>.digrc</code> file.</li> </ul>"},{"location":"reference/modules/#gh","title":"gh","text":"<p>This installs the GitHub CLI tool with Bash completion.</p> <p>Configuration</p> <ul> <li><code>tools/global.cfg</code>:<ul> <li><code>gh</code>: gh script settings. Format: INI-file format.<ul> <li><code>url</code>: download URL for GitHub CLI deb package</li> <li><code>checksum</code>: SHA256 checksum for downloaded deb file</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#git","title":"git","text":"<p>This module configures Git.</p> <p>Configuration</p> <ul> <li><code>tools/global.cfg</code>:<ul> <li><code>git</code>: Git configurations. Format: \"cfg-location config.name value\" (one per line).</li> </ul> </li> </ul>"},{"location":"reference/modules/#gpg","title":"gpg","text":"<p>This provides configuration settings for the GPG encryption program.</p> <p>Configuration</p> <ul> <li><code>tools/gpg-agent.conf</code>: your custom <code>gpg-agent.conf</code> file.</li> </ul>"},{"location":"reference/modules/#mc","title":"mc","text":"<p>It allows you to install and configure Midnight Commander, a robust file manager.</p> <p>Configuration</p> <ul> <li><code>tools/mc/global.d</code>: configuration files for Midnight Commander can be placed in this directory.</li> </ul>"},{"location":"reference/modules/#nano","title":"nano","text":"<p>With this module you can install additional syntax highlighting files for Nano.</p> <p>Tip</p> <p>You can use <code>shell/bash</code> module to install your custom <code>.nanorc</code> file to configure Nano.</p> <p>Configuration</p> <ul> <li><code>tools/nano/global.d</code>: syntax highlighting files for Nano.</li> </ul>"},{"location":"reference/modules/#nmap","title":"nmap","text":"<p>This installs Nmap (network mapper tool), and - currently - only one plugin: \"network-control\".</p>"},{"location":"reference/modules/#pass-update","title":"pass-update","text":"<p>This module installs pass-update an extension for the pass password manager.</p> <p>Configuration</p> <ul> <li><code>tools/global.cfg</code>:<ul> <li><code>pass-update</code>: pass-update script settings. Format: INI-file format.<ul> <li><code>version</code>: pass-update version to install (git tag to checkout)</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/modules/#ssh","title":"ssh","text":"<p>With this module you can configure SSH and add already known hosts.</p> <p>Configuration</p> <ul> <li><code>tools/ssh/global.d</code>: SSH configuration files. Will be copied to <code>~/.ssh/</code> with directory structure preserved.</li> <li><code>tools/global.cfg</code>:<ul> <li><code>ssh-known</code>: entries to SSH known host file (<code>.ssh/known_hosts</code>). Format: as-is, will be appended to the file verbatim.</li> </ul> </li> </ul>"},{"location":"reference/modules/#tomb","title":"tomb","text":"<p>This module installs the Tomb file encryption utility.</p> <p>Configuration</p> <ul> <li><code>tools/global.cfg</code>:<ul> <li><code>tomb</code>: tomb script settings. Format: INI-file format.<ul> <li><code>url</code>: download URL for Tomb tarball</li> <li><code>checksum</code>: SHA256 checksum for downloaded tar-archive</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/zephyrctl/","title":"zephyrctl","text":"<p><code>zephyrctl</code> is a command-line interface (CLI) script that serves as the central control panel for Zephyr . This page outlines the available commands and their usages.</p>"},{"location":"reference/zephyrctl/#burn","title":"burn","text":"<p>Craft a bootable USB stick by burning the provided disk-image (ISO file) onto a USB flash drive. This can be the remixed ISO file or any other disk-image file.</p> <p>All files on the drive will be lost!</p> <p>There are some safe-guards in place, but still be careful when selecting the disk!</p> <p>Create backups if necessary.</p> <p>Usage</p> <pre><code>zephyrctl burn ISO_FILE [DISK]\n\nParams:\nISO_FILE           ISO file to burn (e.g. zephyr.iso)\nDISK               Target USB flash drive device (e.g. /dev/sdc).\n                   Interactive selection if not specified.\n</code></pre>"},{"location":"reference/zephyrctl/#customize","title":"customize","text":"<p>Execute a customization module for a specific profile. Effectively update the system to match configurations in the customization profile.</p> <p>Usage</p> <pre><code>zephyrctl customize PROFILE [MODULE]...\n\nParams:\nPROFILE            Customization profile to use\nMODULE             Module/category to run (eg. apt, system).\n                   If prefixed with '^', then the module\n                   or the whole category is skipped (e.g ^apt, ^system).\n                   If none given, all modules will be executed.\n</code></pre> <p>Examples</p> <pre><code># Run all modules with the 'default' profile\nzephyrctl customize default\n\n# Run only 'locale' and 'sudo' modules with the 'foo' profile\nzephyrctl customize foo locale sudo\n\n# Skip 'certificates' and all 'tools' modules but run others\nzephyrctl customize default ^certificates ^tools\n\n# Skip 'apt' but run all other 'packages' modules\nzephyrctl customize default ^apt packages\n</code></pre>"},{"location":"reference/zephyrctl/#disk","title":"disk","text":"<p>Manage disk layouts before installing Ubuntu. This command allows you to partition, format, or encrypt volumes based on disk maps.</p> <p>This operation is destructive!</p> <p>Ensure you back up your data before proceeding.</p> <p>Usage</p> <pre><code>zephyrctl disk SUBCOMMAND PROFILE MAP...\n\nParams:\nSUBCOMMAND         What to do with the disks\nPROFILE            Customization profile to use\nMAP                Disk maps\n\nSubcommands:\ndecrypt            Open encrypted partitions and volumes\nencrypt            Encrypt partitions and volumes\nformat             Format filesystems on a partition or volume\ninfo               Show disk information\nlvm                Setup LVM (volume groups, physical and logical volumes)\npartition          Partition disk\nzap                Delete all partitions and LVM structures on a disk\n</code></pre>"},{"location":"reference/zephyrctl/#extract-grub","title":"extract-grub","text":"<p>It is possible to override the GRUB configuration in the remixed ISO file. To create this custom GRUB config file, you can use this command to extract <code>grub.cfg</code> from the stock Ubuntu ISO file and modify it.</p> <p>Usage</p> <pre><code>zephyrctl extract-grub ISO_FILE [EXTRACTED]\n\nParams:\nISO_FILE           ISO file to extract GRUB configuration from\nEXTRACTED          Path to save the extracted 'grub.cfg'.\n                   Default is 'extracted.grub.cfg' in the current directory.\n</code></pre>"},{"location":"reference/zephyrctl/#help","title":"help","text":"<p>Obtain information on how to use <code>zephyrctl</code> commands.</p> <p>Usage</p> <pre><code>zephyrctl help [COMMAND]\n\nParams:\nCOMMAND            Name of the command to show help for.\n                   If empty, all available commands will be listed.\n</code></pre>"},{"location":"reference/zephyrctl/#install","title":"install","text":"<p>Install Zephyr  on your computer.</p> <p>Usage</p> <pre><code>zephyrctl install\n</code></pre>"},{"location":"reference/zephyrctl/#launch","title":"launch","text":"<p>Launch Ubuntu installer (ubiquity) in Automatic mode. Use this command on the liveCD to start the installation GUI.</p> <p>Usage</p> <pre><code>zephyrctl launch\n</code></pre>"},{"location":"reference/zephyrctl/#post-install","title":"post-install","text":"<p>Perform various OS post-installation steps such as GRUB configuration and GPT backup.</p> <p>Usage</p> <pre><code>zephyrctl post-install ENVIRONMENT PROFILE MAP...\n\nParams:\nENVIRONMENT        Environment where the command is executed\n                     live: live system\n                     install: Ubuntu post-installation step\n                     dev: useful when developing Zephyr\nPROFILE            Customization profile to use\nMAP                Disk maps\n</code></pre>"},{"location":"reference/zephyrctl/#remix","title":"remix","text":"<p>Remix an Ubuntu image file to embed Zephyr &amp; customization profiles, and an optional payload. This payload can be any files or scripts that you want to embed into the ISO file.</p> <p>Usage</p> <pre><code>zephyrctl remix ISO_IN [ISO_OUT]\n\nParams:\nISO_IN             ISO file to remix (e.g. path/to/ubuntu-20.04.6-desktop-amd64.iso)\nISO_OUT            Path to save the remixed ISO file.\n                   Default is 'zephyr.iso' in the current directory.\n</code></pre>"},{"location":"reference/zephyrctl/#uninstall","title":"uninstall","text":"<p>Removes Zephyr from your computer.</p> <p>Usage</p> <pre><code>zephyrctl uninstall\n</code></pre>"}]}