#!/usr/bin/env bash
################
## ES-Ubuntu  ##
##            ##
## Controller ##
################

###############
## FUNCTIONS ##
###############

## Main usage text
##################
_usage-main() {
    local command=()
    local sorted_commands_array=()
    local line name help sorted_commands_string

    command+=("create:Create ES-Ubuntu ISO")
    command+=("burn:Burn to ISO to USB")
    command+=("partition:Partition disk")
    command+=("post-install:OS post-install steps")
    command+=("customize:Customize Ubuntu")
    command+=("help:Display help")
    sorted_commands_string=$(sort <<<"${command[*]}")
    mapfile -t sorted_commands_array <<<"${sorted_commands_string[*]}"

    echo -e "${TXT_GREEN}ES-Ubuntu${TXT_NORM} controller\n"
    echo -e "${TXT_YELLOW}Usage:${TXT_NORM}"
    echo -e  "  esubuntuctl COMMAND [OPTIONS]...\n"
    echo -e  "${TXT_YELLOW}Commands:${TXT_NORM}"
    for line in "${sorted_commands_array[@]}"; do
        IFS=":" read -r name help <<<"${line}"
        printf "  ${TXT_GREEN}%-20s${TXT_NORM}%s\n" "${name}" "${help}"
    done

    exit 1
}

## Print usage
##
## @param    $1  Usage selector
###############################
_usage() {
    local selector="${1:-}"
    local usage line name help
    local options=()

    case "${selector}" in
        "")
            usage="help COMMAND"
            options+=("COMMAND:command to run (for available commands run 'esubuntuctl' without arguments")
            ;;
        create)
            usage="create ISO_FILE"
            options+=("ISO_FILE:ISO to customize (e.g. ubuntu live-cd)")
            ;;
        burn)
            usage="burn ISO_FILE [DISK]"
            options+=("ISO_FILE:ISO to burn")
            options+=("DISK:Device to copy to (eg. /dev/sdc)")
            ;;
        partition)
            usage="partition MAP..."
            options+=("MAP:Partition maps")
            ;;
        post-install)
            usage="post-install MAP..."
            options+=("MAP:Partition maps")
            ;;
        customize)
            usage="customize PROFILE [MODULE]..."
            options+=("PROFILE:Customization profile to use")
            options+=("MODULE:Module to update (eg. packages, bash)")
            ;;
        *) _usage-main ;;
    esac

    echo -e "${TXT_YELLOW}Usage:${TXT_NORM}"
    echo -e "  esubuntuctl ${usage}\n"
    echo -e "${TXT_YELLOW}Options:${TXT_NORM}\n"
    for line in "${options[@]}"; do
        IFS=":" read -r name help <<<"${line}"
        printf "  ${TXT_GREEN}%-20s${TXT_NORM}%s\n" "${name}" "${help}"
    done
}

## Create ISO
#############
_create() {
    if [[ -z "${1:-}" ]]; then
        print-error "ISO image missing!"
        _usage create
        exit 1
    fi
    "${ES_BUNDLE_SCRIPTS}/iso-unpack" "${1}"
    "${ES_BUNDLE_SCRIPTS}/copy-esubuntu"
    "${ES_BUNDLE_SCRIPTS}/iso-pack" "${1}"
    "${ES_BUNDLE_SCRIPTS}/clean-up"
}

## Burn ISO
###########
_burn() {
    if [[ -z "${1:-}" ]]; then
        print-error "ISO image missing!"
        _usage burn
        exit 1
    fi
    "${ES_BUNDLE_SCRIPTS}/iso-burn" "${1}" "${2:-}"
}

## Partition disks
##################
_partition() {
    sudo PROJECT_ROOT="${PROJECT_ROOT}" "${ES_INSTALL_SCRIPTS}/partition" "${@}"
}

## Post-install
###############
_post-install() {
    sudo PROJECT_ROOT="${PROJECT_ROOT}" "${ES_INSTALL_SCRIPTS}/post-install" "${@}"
}

## Customize
##
## @param   $1  Profile
#######################
_customize() {
    local profile
    local module_selected=

    if [[ -z "${1:-}" ]]; then
        print-error "Profile missing!"
        _usage customize
        exit 1
    fi
    profile="${1}"
    shift
    [[ $# -gt 0 ]] && module_selected=1

    [[ -z "${module_selected}" ]] && sudo systemctl stop unattended-upgrades.service
    "${ES_CUSTOMIZE_SCRIPTS}/runner" "${profile}" "${@}"
    [[ -z "${module_selected}" ]] && sudo systemctl start unattended-upgrades.service

    print-finish "\nCustomization finished!"
    if [[ -z "${module_selected}" ]]; then
        echo
        read -r -p "Reboot is required, do you want it now? (y/n) "
        [[ ${REPLY} == "y" || ${REPLY} == "Y" ]] && reboot
    fi
}

##################
## SCRIPT START ##
##################

# Strict mode
set -euo pipefail
IFS=$'\n\t'

# Set default for PROJECT_ROOT
if ! printenv PROJECT_ROOT >/dev/null 2>&1; then
    path_self=$(realpath "${0}")
    PROJECT_ROOT="$(cd "$(dirname "${path_self}")" >/dev/null 2>&1 && pwd)"
    export PROJECT_ROOT
fi

source "${PROJECT_ROOT}/bootstrap.sh"

# Parse options
cmd="${1:-}"
[[ -n "${cmd}" ]] && shift

# Switch action
case "${cmd}" in
    create|burn|partition|post-install|customize) "_${cmd}" "${@}" ;;
    help) _usage "${1:-}" ;;
    *) _usage-main ;;
esac

exit 0
