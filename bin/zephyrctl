#!/usr/bin/env bash
################
## Zephyr     ##
##            ##
## Controller ##
################

###############
## FUNCTIONS ##
###############

## Main usage text
##################
_usage-main() {
    local command=()
    local sorted_commands_array=()
    local line name help sorted_commands_string

    command+=("extract-grub:Extract grub.cfg from ISO")
    command+=("remix:Create Zephyr ISO")
    command+=("burn:Burn Zephyr ISO to USB")
    command+=("disk:Manage disks and volumes (partition, encrypt, format, etc.)")
    command+=("launch:Launch Ubuntu GUI installer")
    command+=("partition:Partition disk (DEPRECATED)")
    command+=("format:Format partitions (DEPRECATED)")
    command+=("post-install:OS post-install steps")
    command+=("customize:Customize Ubuntu")
    command+=("install:Install Zephyr")
    command+=("uninstall:Uninstall Zephyr")
    command+=("help:Display help")
    sorted_commands_string=$(sort <<<"${command[*]}")
    mapfile -t sorted_commands_array <<<"${sorted_commands_string[*]}"

    echo -e "${TXT_GREEN}Zephyr${TXT_NORM} controller"
    echo -e "Copyright (C) 2023 Sandor Semsey\n"
    echo -e "${TXT_YELLOW}Usage:${TXT_NORM}"
    echo -e  "  zephyrctl COMMAND [OPTIONS]...\n"
    echo -e  "${TXT_YELLOW}Commands:${TXT_NORM}"
    for line in "${sorted_commands_array[@]}"; do
        IFS=: read -r name help <<<"${line}"
        printf "  ${TXT_GREEN}%-20s${TXT_NORM}%s\n" "${name}" "${help}"
    done

    exit 1
}

## Print usage
##
## @param    $1  Usage selector
###############################
_usage() {
    local selector="${1:-}"
    local description usage line name help path modules
    local options=()
    local subcommands=()

    case "${selector}" in
        "")
            description="Display help for a command"
            usage="help COMMAND"
            options+=("COMMAND:The command name (to view available commands, run 'zephyrctl' without arguments)")
            ;;
        extract-grub)
            description="Extract grub.cfg from ISO file. Can be used as a starting point for a custom GRUB configuration."
            usage="extract-grub ISO_IN [EXTRACTED]"
            options+=("ISO_IN:ISO file to remix (e.g. path/to/ubuntu-20.04.6-desktop-amd64.iso)")
            options+=("EXTRACTED:Path to save the extracted 'grub.cfg'. Defaults to 'extracted.grub.cfg' in current dir.")
            ;;
        remix)
            description="Remix an Ubuntu image file and embed Zephyr (along with your profiles and payload)"
            usage="remix ISO_IN [ISO_OUT]"
            options+=("ISO_IN:ISO file to remix (e.g. path/to/ubuntu-20.04.6-desktop-amd64.iso)")
            options+=("ISO_OUT:Remixed ISO file. Defaults to zephyr.iso in current dir.")
            ;;
        burn)
            description="Create a bootable USB stick from an image file"
            usage="burn ISO_FILE [DISK]"
            options+=("ISO_FILE:ISO file to burn (e.g. zephyr.iso)")
            options+=("DISK:USB flash drive device file (e.g. /dev/sdc). Interactive selection if not specified.")
            ;;
        disk)
            description="Setup disk layout before installing Ubuntu: e.g. create, format or encrypt volumes. Be careful, as it's a dangerous operation. Create backups beforehand!"
            usage="disk SUBCOMMAND PROFILE MAP..."
            options+=("SUBCOMMAND:What to do with the disks")
            options+=("PROFILE:Customization profile to use")
            options+=("MAP:Disk maps")
            ;;
        partition)
            description="Partition a drive. Be careful, as it's a dangerous operation. Create backups beforehand! Deprecated, use 'zephyrctl disk partition' instead."
            usage="partition PROFILE MAP..."
            options+=("PROFILE:Customization profile to use")
            options+=("MAP:Disk maps")
            ;;
        format)
            description="(Re)format partitions. Be careful, as it's a dangerous operation. Create backups beforehand! Deprecated, use 'zephyrctl disk format' instead."
            usage="format PROFILE MAP..."
            options+=("PROFILE:Customization profile to use")
            options+=("MAP:Disk maps")
            ;;
        launch)
            description="Launch Ubuntu installer (ubiquity) in Automatic mode. Use this command on the liveCD to start the installation GUI."
            usage="launch"
            ;;
        post-install)
            description="Perform various OS post-install steps (e.g. GRUB configuration, backup GPT)"
            usage="post-install ENVIRONMENT PROFILE MAP..."
            options+=("ENVIRONMENT:Environment where the command is executed (live: live system, install: Ubuntu post-installation, dev: Zephyr development)")
            options+=("PROFILE:Customization profile to use")
            options+=("MAP:Disk maps")
            ;;
        customize)
            description="Update/customize a module. This command plays a key role in customizing your Ubuntu installation."
            usage="customize PROFILE [MODULE]..."
            options+=("PROFILE:Customization profile to use")
            options+=("MODULE:Module/category to run (eg. apt, system). If prefixed with '~', then the module or the whole category is skipped (e.g ~apt, ~system). If none given, all modules will be executed.")
            ;;
        install)
            description="Install Zephyr on your computer"
            usage=install
            ;;
        uninstall)
            description="Remove Zephyr from your computer"
            usage=uninstall
            ;;
        *) _usage-main ;;
    esac

    echo -e "${TXT_YELLOW}Description:${TXT_NORM}"
    echo -e "  ${description}\n"
    echo -e "${TXT_YELLOW}Usage:${TXT_NORM}"
    echo -e "  zephyrctl ${usage}\n"
    if [[ -n "${options[*]}" ]]; then
        echo -e "${TXT_YELLOW}Options:${TXT_NORM}"
        for line in "${options[@]}"; do
            IFS=: read -r name help <<<"${line}"
            printf "  ${TXT_GREEN}%-20s${TXT_NORM}%s\n" "${name}" "${help}"
        done
    fi

    # Show available categories and modules for 'customize' command
    if [[ "${selector}" == customize ]]; then
        echo -e "\n${TXT_YELLOW}Available categories and modules:${TXT_NORM}"
        while IFS= read -r -d '' path; do
            echo -ne "  ${TXT_GREEN}$(basename "${path}")${TXT_NORM}:"
            modules=$(find "${path}" -type f -executable -printf " %f\n" | sort)
            # shellcheck disable=SC2068
            implode , ${modules[@]}
        done < <(find "${PATH_SCRIPTS_CUSTOMIZE}" -mindepth 1 -maxdepth 1 -type d -print0 | sort -z || true)
    fi

    # Show available subcommands for 'disk' command
    if [[ "${selector}" == disk ]]; then
        subcommands+=("decrypt:Open encrypted partitions and volumes")
        subcommands+=("encrypt:Encrypt partitions and volumes")
        subcommands+=("format:Format filesystems on a partition or volume")
        subcommands+=("info:Show disk information")
        subcommands+=("lvm:Setup LVM (volume groups, physical and logical volumes)")
        subcommands+=("partition:Partition disk")
        subcommands+=("zap:Delete all partitions and LVM structures on a disk")
        echo -e "\n${TXT_YELLOW}Subcommands:${TXT_NORM}"
        for line in "${subcommands[@]}"; do
            IFS=: read -r name help <<<"${line}"
            printf "  ${TXT_GREEN}%-20s${TXT_NORM}%s\n" "${name}" "${help}"
        done
    fi
}

## Extract GRUB config from ISO
###############################
# shellcheck disable=SC2317
_extract-grub() {
    if [[ -z "${1:-}" ]]; then
        print-error ISO image missing!
        _usage extract-grub
        exit 1
    fi
    local extracted="${2:-extracted.grub.cfg}"

    "${PATH_SCRIPTS_REMIX}/unpack" "${1}"
    print-status Extract grub.cfg from ISO...
    [[ -e "${extracted}" ]] && rm -f "${extracted}"
    cp "${PATH_EXTRACT}/iso/boot/grub/grub.cfg" "${extracted}"
    print-finish
    "${PATH_SCRIPTS_REMIX}/clean-up"
}

## Create ISO
#############
# shellcheck disable=SC2317
_remix() {
    if [[ -z "${1:-}" ]]; then
        print-error ISO image missing!
        _usage remix
        exit 1
    fi
    "${PATH_SCRIPTS_REMIX}/unpack" "${1}"
    "${PATH_SCRIPTS_REMIX}/copy-files"
    "${PATH_SCRIPTS_REMIX}/pack" "${1}" "${2:-}"
    "${PATH_SCRIPTS_REMIX}/clean-up"
}

## Burn ISO
###########
# shellcheck disable=SC2317
_burn() {
    if [[ -z "${1:-}" ]]; then
        print-error ISO image missing!
        _usage burn
        exit 1
    fi
    "${PATH_SCRIPTS_REMIX}/burn" "${1}" "${2:-}"
}

## Install Zephyr
#################
# shellcheck disable=SC2317
_install() {
    print-status Set up Bash completion...
    sudo install --mode=0644 --no-target-directory "${PROJECT_ROOT}/bin/completion.sh" /etc/bash_completion.d/zephyrctl
    sudo sed -i "s@{{ INSTALL_DIR }}@${PROJECT_ROOT}@g" /etc/bash_completion.d/zephyrctl
    print-finish

    print-status Symlink controller...
    sudo rm -f /usr/local/bin/zephyrctl
    sudo ln -s "${PROJECT_ROOT}/bin/zephyrctl" /usr/local/bin/zephyrctl
    print-finish
}

## Uninstall Zephyr
#################
# shellcheck disable=SC2317
_uninstall() {
    print-status Remove Bash completion...
    sudo rm /etc/bash_completion.d/zephyrctl
    print-finish

    print-status Unlink controller...
    sudo rm -f /usr/local/bin/zephyrctl
    print-finish

    print-status Remove Zephyr files...
    sudo rm -rf "${PROJECT_ROOT}"
    print-finish
}

## Partition disks
##################
# shellcheck disable=SC2317
_partition() {
    local profile

    if [[ -z "${1:-}" ]]; then
        print-error Profile missing!
        _usage partition
        exit 1
    fi
    profile="${1}"
    if [[ ! -e "${PATH_PROFILES}/${profile}" ]]; then
        print-error Profile: "${profile}" missing!
        exit 1
    fi
    shift

    sudo env PROJECT_ROOT="${PROJECT_ROOT}" "${PATH_SCRIPTS_INSTALL}/partition" "${profile}" "${@}"
}

## Format partitions
####################
# shellcheck disable=SC2317
_format() {
    local profile

    if [[ -z "${1:-}" ]]; then
        print-error Profile missing!
        _usage format
        exit 1
    fi
    profile="${1}"
    if [[ ! -e "${PATH_PROFILES}/${profile}" ]]; then
        print-error Profile: "${profile}" missing!
        exit 1
    fi
    shift

    sudo env PROJECT_ROOT="${PROJECT_ROOT}" "${PATH_SCRIPTS_INSTALL}/format" "${profile}" "${@}"
}

## Manage disks
###############
# shellcheck disable=SC2317
_disk() {
    local subcommand="${1:-}"
    local profile="${2:-}"

    if [[ -z "${subcommand}" ]]; then
        print-error Subcommand missing!
        _usage disk
        exit 1
    fi

    if [[ -z "${profile}" ]]; then
        print-error Profile missing!
        _usage disk
        exit 1
    fi

    if [[ ! -e "${PATH_PROFILES}/${profile}" ]]; then
        print-error Profile: "${profile}" missing!
        exit 1
    fi
    shift 2

    sudo env PROJECT_ROOT="${PROJECT_ROOT}" "${PATH_SCRIPTS_INSTALL}/disk" "${subcommand}" "${profile}" "${@}"
}

## Launch ubiquity GUI
######################
# shellcheck disable=SC2317
_launch() {
    sudo --preserve-env=DBUS_SESSION_BUS_ADDRESS,XDG_DATA_DIRS,XDG_RUNTIME_DIR sh -c "ubiquity --automatic gtk_ui"
}

## Post-install
###############
# shellcheck disable=SC2317
_post-install() {
    local environment profile

    environment="${1:-}"
    profile="${2:-}"
    if [[ -z "${environment}" ]]; then
        print-error Environment missing!
        _usage post-install
        exit 1
    fi
    if [[ -z "${profile}" ]]; then
        print-error Profile missing!
        _usage post-install
        exit 1
    fi
    if [[ ! -e "${PATH_PROFILES}/${profile}" ]]; then
        print-error Profile: "${profile}" missing!
        exit 1
    fi
    shift 2

    sudo env PROJECT_ROOT="${PROJECT_ROOT}" "${PATH_SCRIPTS_INSTALL}/post-install" "${environment}" "${profile}" "${@}"
}

## Customize
##
## @param   $1  Profile
#######################
# shellcheck disable=SC2317
_customize() {
    local profile
    local module_selected=

    if [[ -z "${1:-}" ]]; then
        print-error Profile missing!
        _usage customize
        exit 1
    fi
    profile="${1}"
    if [[ ! -e "${PATH_PROFILES}/${profile}" ]]; then
        print-error Profile: "${profile}" missing!
        exit 1
    fi
    shift

    [[ $# -gt 0 ]] && module_selected=1

    [[ -z "${module_selected}" ]] && sudo systemctl stop unattended-upgrades.service
    "${PATH_SCRIPTS_CUSTOMIZE}/runner" "${profile}" "${@}"
    [[ -z "${module_selected}" ]] && sudo systemctl start unattended-upgrades.service

    print-finish Customization finished!
    if [[ -z "${module_selected}" ]]; then
        read -r -p "Reboot is required, do you want it now? (y/n) "
        [[ ${REPLY} == y || ${REPLY} == Y ]] && reboot
    fi
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

# Set default for PROJECT_ROOT
if ! printenv PROJECT_ROOT >/dev/null 2>&1; then
    path_self=$(realpath "${0}")
    PROJECT_ROOT=$(cd "$(dirname "$(dirname "${path_self}")")" >/dev/null 2>&1 && pwd)
    export PROJECT_ROOT
fi

source "${PROJECT_ROOT}/bin/bootstrap.sh"

# Parse options
cmd="${1:-}"
[[ -n "${cmd}" ]] && shift

# Show help if requested by option flag not help command
if [[ "${cmd}" != help ]]; then
    for arg in "${@}"; do
        if [[ "${arg}" == "--help" || "${arg}" == "-h" ]]; then
            "${PROJECT_ROOT}/bin/zephyrctl" help "${cmd}"
            exit 0
        fi
    done
fi

# Switch action
case "${cmd}" in
    extract-grub|remix|burn|disk|partition|format|post-install|customize|install|uninstall|launch) "_${cmd}" "${@}" ;;
    help) _usage "${1:-}" ;;
    *) _usage-main ;;
esac

exit 0
