#!/usr/bin/env bash
####################
## ES-Ubuntu      ##
##                ##
## Post-install   ##
## LUKS automount ##
####################

###############
## FUNCTIONS ##
###############

## Add key to a LUKS partition
##
## @param    $1  LUKS partition
## @param    $2  Key file
## @param    $3  Key slot
###############################
_luks-add-key() {
    local partition="${1:?"Partition missing"}"
    local key_file="${2:?"Key file missing"}"
    local key_slot="${3:?"Key slot missing"}"

    # Deleting previous key
    cryptsetup luksKillSlot -q "${partition}" "${key_slot}" || true
    # Add new
    cryptsetup luksAddKey --iter-time 3000 --key-slot "${key_slot}" "${partition}" "${key_file}"
}

## Update /etc/crypttab
##
## @param    $1  LUKS partition
## @param    $2  Label
## @param    $3  Key file
###############################
_luks-crypttab() {
    local partition="${1:?"Partition missing"}"
    local label="${2:?"Label missing"}"
    local key_file="${3:?"Key file missing"}"

    UUID=$(blkid -s UUID -o value "${partition}")
    if ! grep -qs "${UUID}" /etc/crypttab; then
        echo "LUKS_${label} UUID=${UUID} ${key_file} luks,discard" >>/etc/crypttab
    fi
}

##################
## SCRIPT START ##
##################

# Strict mode
set -euo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bootstrap.sh"
check-root || exit 1

profile="${1:?"Profile missing"}"
shift

# Maps
map_files=()
for map in "${@}"; do
    if file=$(cfg-get "${profile}" "install/partition-maps/${map}"); then
        map_files+=("${file}")
    fi
done
[[ -z "${map_files[*]}" ]] && error-exit "No maps found"

print-header "Install cryptsetup-initramfs..."
apt-get install --yes --no-install-recommends cryptsetup-initramfs
print-finish

print-status "Configure cryptsetup-initramfs..."
# Keyfile
sed -i -r "/^#?KEYFILE_PATTERN=/ c KEYFILE_PATTERN=${LUKS_KEY_DIR}/*.key" /etc/cryptsetup-initramfs/conf-hook
# Umask
if file=$(cfg-get "${profile}" install/initramfs.conf); then
    cp "${file}" /etc/initramfs-tools/conf.d/esubuntu.conf
fi
print-finish

# Loop through maps
for map_file in "${map_files[@]}"; do
    partition=$(basename "${map_file}")

    print-header "Create key file for ${partition}..."
    mkdir -p "${LUKS_KEY_DIR}"
    dd if=/dev/urandom of="${LUKS_KEY_DIR}/${partition}.key" bs=4096 count=1
    print-finish

    print-status "Secure key-file for ${partition}..."
    chmod o-rwx "${LUKS_KEY_DIR}"
    chmod go-rwx "${LUKS_KEY_DIR}/${partition}.key"
    print-finish

    # Loop through disks
    disks=$(cfg-read "${map_file}" DISKS)
    for line in ${disks}; do
        IFS=$' \t' read -r name device part_prefix <<< "${line}"

        # Loop through partitions
        partitions=$(cfg-read "${map_file}" "PARTITIONS_${name}")
        for part_line in ${partitions}; do
            IFS=$' \t' read -r number gap size type label format <<< "${part_line}"

            if [[ "${type}" == luks* ]]; then
                print-header "Add machine key to LUKS ${label}..."
                _luks-add-key "${device}${part_prefix}${number}" "${LUKS_KEY_DIR}/${partition}.key" "${LUKS_KEY_SLOT}"
                print-finish

                print-status "Update crypttab with ${label}..."
                _luks-crypttab "${device}${part_prefix}${number}" "${label}" "${LUKS_KEY_DIR}/${partition}.key"
                print-finish
            fi
        done
    done
done

exit 0
