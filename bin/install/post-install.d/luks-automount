#!/usr/bin/env bash
####################
## Zephyr         ##
##                ##
## Post-install   ##
## LUKS automount ##
####################

###############
## FUNCTIONS ##
###############

## Add key to a LUKS container
##
## @param    $1  Device
## @param    $2  Key file
## @param    $3  Key slot
##############################
_luks-add-key() {
    local device="${1:?Device missing}"
    local key_file="${2:?Key file missing}"
    local key_slot="${3:?Key slot missing}"
    local luks2_options=()

    if cryptsetup isLuks --type luks2 "${device}"; then
        luks2_options=(--pbkdf=argon2id --pbkdf-memory=2097152)
    fi

    # Deleting previous key
    cryptsetup luksKillSlot --batch-mode "${device}" "${key_slot}" || true
    # Add new
    cryptsetup luksAddKey \
        --key-slot "${key_slot}" \
        --hash=sha512 \
        --iter-time 3000 \
        "${luks2_options[@]}" -- "${device}" "${key_file}"
}

## Update /etc/crypttab
##
## @param    $1  Device
## @param    $2  Label
## @param    $3  Key file
#########################
_luks-crypttab() {
    local device="${1:?Device missing}"
    local label="${2:?Label missing}"
    local key_file="${3:?Key file missing}"

    UUID=$(cryptsetup luksUUID "${device}")
    if ! grep -qs "${UUID}" /etc/crypttab; then
        echo "${label} UUID=${UUID} ${key_file} luks,discard" >>/etc/crypttab
    fi
}

## Copy initramfs config file
##
## @param   $1  Global/Local
## @param   $2  Config dir
############################
_config() {
    local selector="${1:?Selector missing}"
    local cfg_dir="${2:?Config dir missing}"

    print-status Config initramfs "[${selector}]..."
    find -L "${cfg_dir}" -mindepth 1 -maxdepth 1 -type f -exec sudo install --mode=0644 {} /etc/initramfs-tools/conf.d/ \;
    print-finish
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-root

profile="${1:?Profile missing}"
key_dir=
key_slot=
shift

# Read config file, get options
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" install/global.cfg); then
    cfg-eval "${file}" luks
fi
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" install/local.cfg); then
    cfg-eval "${file}" luks
fi

[[ -z "${key_dir}" ]] && error-exit Missing key_dir
[[ -z "${key_slot}" ]] && error-exit Missing key_slot

# Parse disk maps
jobs=()
declare -A disk_devices
declare -A disk_part_prefixes
for map in "${@}"; do
    # shellcheck disable=SC2310,SC2311
    if file=$(cfg-get "${profile}" "install/disk-maps/${map}"); then
        # Parse disks
        for line in $(cfg-read "${file}" disks); do
            IFS=$' \t' read -r -a arguments <<<"${line}"
            disk="${arguments[0]}"
            disk_device="${arguments[1]}"
            disk_part_prefix="${arguments[2]:-}"

            disk_devices["${disk}"]="${disk_device}"
            disk_part_prefixes["${disk}"]="${disk_part_prefix}"
        done

        # Parse partitions
        for line in $(cfg-read "${file}" partitions); do
            IFS=$' \t' read -r -a arguments <<<"${line}"
            disk="${arguments[0]}"
            part_number="${arguments[1]}"
            label="${arguments[5]}"
            crypt="${arguments[6]}"

            [[ "${crypt}" != luks* ]] && continue

            device="${disk_devices["${disk}"]}${disk_part_prefixes["${disk}"]}${part_number}"
            jobs+=("${device},${label}")
        done

        # Parse volumes
        for line in $(cfg-read "${file}" volumes); do
            IFS=$' \t' read -r -a arguments <<<"${line}"
            vol_group="${arguments[0]}"
            name="${arguments[1]}"
            crypt="${arguments[3]}"

            [[ "${crypt}" != luks* ]] && continue

            device="/dev/${vol_group}/${name}"
            jobs+=("${device},${name}")
        done

        # Parse disks and partitions (legacy format)
        for line in $(cfg-read "${file}" DISKS); do
            IFS=$' \t' read -r name disk_device part_prefix <<< "${line}"
            # Loop through partitions
            for part_line in $(cfg-read "${file}" "PARTITIONS_${name}"); do
                IFS=$' \t' read -r number _ _ type label <<< "${part_line}"

                [[ "${type}" != luks* ]] && continue

                device="${disk_device}${part_prefix}${number}"
                jobs+=("${device},${label}")
            done
        done
    else
        print-warning Map not found: "${map}", ignoring.
    fi
done

if [[ -z "${jobs[*]}" ]]; then
    print-finish Nothing to do.
    exit 0
fi

# Prepare
install-apt cryptsetup-initramfs

print-status Config cryptsetup-initramfs...
sed -i -r "/^#?KEYFILE_PATTERN=/ c KEYFILE_PATTERN=${key_dir}/*.key" /etc/cryptsetup-initramfs/conf-hook
print-finish

# shellcheck disable=SC2310,SC2311
if dir=$(cfg-get "${profile}" install/initramfs/global.d); then
    _config global "${dir}"
fi
# shellcheck disable=SC2310,SC2311
if dir=$(cfg-get "${profile}" install/initramfs/local.d); then
    _config local "${dir}"
fi

print-status Create LUKS keys dir...
mkdir -p "${key_dir}"
chmod 0700 "${key_dir}"
print-finish

# Do the auto-mounting
for job in "${jobs[@]}"; do
    IFS=, read -r device label <<< "${job}"
    key_file="${key_dir}/${label}.key"

    print-header Create key file for "${label}..."
    dd if=/dev/urandom of="${key_file}" bs=4096 count=1
    chmod 0600 "${key_file}"
    print-finish

    print-header Add key file to LUKS container "${label}..."
    _luks-add-key "${device}" "${key_file}" "${key_slot}"
    print-finish

    print-status Update crypttab with "${label}..."
    _luks-crypttab "${device}" "${label}" "${key_file}"
    print-finish
done

exit 0
