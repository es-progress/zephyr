#!/usr/bin/env bash
##################
## Zephyr       ##
##              ##
## Post-install ##
## Backup GPT   ##
##################

###############
## FUNCTIONS ##
###############

## Backup GPT partition table
##
## @param    $1  Device
## @param    $2  Backup file
#############################
_gpt-backup() {
    local device="${1:?Device missing}"
    local backup_file="${2:?Backup filename missing}"
    sgdisk --backup "${backup_file}" "${device}"
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-root

profile="${1:?Profile missing}"
backup_dir=
shift

# Read config file, get options
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" install/global.cfg); then
    cfg-eval "${file}" backup-gpt
fi
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" install/local.cfg); then
    cfg-eval "${file}" backup-gpt
fi

[[ -z "${backup_dir}" ]] && error-exit Missing backup_dir

# Parse disk maps
disks=()
declare -A disk_devices
for map in "${@}"; do
    # shellcheck disable=SC2310,SC2311
    if file=$(cfg-get "${profile}" "install/disk-maps/${map}"); then
        # Parse disks
        for line in $(cfg-read "${file}" disks); do
            IFS=$' \t' read -r -a arguments <<<"${line}"
            disk="${arguments[0]}"
            disks+=("${disk}")
            disk_devices["${disk}"]="${arguments[1]}"
        done

        # Parse disks (legacy format)
        for line in $(cfg-read "${file}" DISKS); do
            IFS=$' \t' read -r -a arguments <<<"${line}"
            disk="${arguments[0]}"
            disks+=("${disk}")
            disk_devices["${disk}"]="${arguments[1]}"
        done
    else
        print-warning Map not found: "${map}", ignoring.
    fi
done

if [[ -z "${disks[*]}" ]]; then
    print-finish Nothing to do.
    exit 0
fi

mkdir -p "${backup_dir}"

# Do the backup
for disk in "${disks[@]}"; do
    print-header Backup partition table for "${disk}..."
    _gpt-backup "${disk_devices[${disk}]}" "${backup_dir}/${disk}.gpt"
    print-finish
done

exit 0
