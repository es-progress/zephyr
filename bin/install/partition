#!/usr/bin/env bash
#####################
## ES-Ubuntu       ##
##                 ##
## Install         ##
## Partition disks ##
#####################

###############
## FUNCTIONS ##
###############

## Destroy partition table
##
## @param    $1  Device
##########################
_partition-zap() {
    local device="${1:?"Device missing"}"
    sgdisk --zap-all "${device}"

    # Inform kernel about partitions
    partprobe "${device}"
    sleep 3
}

## Create partition
##
## @param    $1  Device
## @param    $2  Partition number
## @param    $3  Gap (free space before this partition)
## @param    $4  Size
## @param    $5  Type (luks1, luks2, efi, msr, win, linux)
## @param    $6  Label
##########################################################
_partition-create() {
    local device="${1:?"Device missing"}"
    local number="${2:?"Partition number missing"}"
    local gap="${3:?"Gap size missing"}"
    local size="${4:?"Partition size missing"}"
    local type="${5:?"Partition type missing"}"
    local label="${6:?"Partition label missing"}"
    local type_code

    case "${type}" in
        luks1|luks2) type_code=8309 ;;
        efi) type_code=ef00 ;;
        msr) type_code=0c01 ;;
        win) type_code=0700 ;;
        linux) type_code=8300 ;;
        *)
            print-error "Unsupported type: ${type}"
            return 1 ;;
    esac

    sgdisk -n "${number}:+${gap}:+${size}" -t "0:${type_code}" -c "0:${label}" "${device}"

    # Inform kernel about partitions
    partprobe "${device}"
    sleep 3
}

## Encrypt LUKS partition
##
## @param    $1  Partition
## @param    $2  LUKS Type (luks1, luks2)
## @param    $3  Label
#########################################
_partition-luks-create() {
    local partition="${1:?"Partition missing"}"
    local type="${2:?"LUKS type missing"}"
    local label="${3:?"Partition label missing"}"

    cryptsetup luksFormat \
        --verify-passphrase \
        "--type=${type}" \
        --cipher=aes-xts-plain64 \
        --key-size=512 \
        --hash=sha512 \
        --iter-time=3000 \
        --use-urandom -- "${partition}"
    cryptsetup open --type luks "${partition}" "LUKS_${label}"
}

## Format partition
##
## @param    $1  Partition
## @param    $2  Type (luks1, luks2, efi, msr, win, linux)
## @param    $3  Label
##########################################################
_partition-format() {
    local partition="${1:?"Partition missing"}"
    local type="${2:?"Type missing"}"
    local label="${3:?"Partition label missing"}"

    case "${type}" in
        luks1|luks2) mkfs.ext4 -L "${label}" "/dev/mapper/LUKS_${label}" ;;
        efi) mkfs.vfat -F 32 -n "${label}" "${partition}" ;;
        msr) dd if=/dev/zero "of=${partition}" status=progress || true ;;
        win) mkntfs -f -L "${label}" "${partition}" ;;
        linux) mkfs.ext4 -L "${label}" "${partition}" ;;
        *)
            print-error "Unsupported type: ${type}"
            return 1 ;;
    esac
}

##################
## SCRIPT START ##
##################

# Strict mode
set -euo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bootstrap.sh"
check-root || exit 1

# Maps
maps=("${@:-}")
map_files=()
for map in "${maps[@]}"; do
    if [[ -f "${ES_CFG_LOCAL}/config/install/partition-maps/${map}" ]]; then
        map_files=("${map_files[@]}" "${ES_CFG_LOCAL}/config/install/partition-maps/${map}")
    elif [[ -f "${ES_INSTALL_CFG}/partition-maps/${map}" ]]; then
        map_files=("${map_files[@]}" "${ES_INSTALL_CFG}/partition-maps/${map}")
    else
        echo "Available maps:"
        ls -1 "${ES_INSTALL_CFG}/partition-maps"
        [[ -d "${ES_CFG_LOCAL}/config/install/partition-maps" ]] && ls -1 "${ES_CFG_LOCAL}/config/install/partition-maps"
        error-exit "Failed to find partition map"
    fi
done

# Loop through maps
for map_file in "${map_files[@]}"; do
    print-section "Available drives"
    lsblk -o NAME,LABEL,FSTYPE,SIZE,MODEL -e7,11

    print-section "Parsed config"
    sed -r -e '/^\s*$/ d' -e '/\s*#/ d' "${map_file}"
    echo
    read -rp "WARNING! Listed drives will be erased! Proceed? Type 'YES': "
    [[ ${REPLY} != "YES" ]] && error-exit Aborted.

    # Loop through disks
    disks=$(read-file-cfg "${map_file}" DISKS)
    for line in ${disks}; do
        IFS=$' \t' read -r name device part_prefix <<< "${line}"
        print-section "Partition ${device}..."

        print-header "Destroy partition table on ${device} (${name})..."
        _partition-zap "${device}"
        print-finish

        # Loop through partitions
        partitions=$(read-file-cfg "${map_file}" "PARTITIONS_${name}")
        for part_line in ${partitions}; do
            IFS=$' \t' read -r number gap size type label format <<< "${part_line}"
            print-header "Create partition: ${label}..."
            _partition-create "${device}" "${number}" "${gap}" "${size}" "${type}" "${label}"
            print-finish

            if [[ "${type}" == luks* ]]; then
                print-header "LUKS encrypting ${label}..."
                _partition-luks-create "${device}${part_prefix}${number}" "${type}" "${label}"
                print-finish
            fi

            if [[ "${format}" == "y" ]]; then
                print-header "Format ${label}..."
                _partition-format "${device}${part_prefix}${number}" "${type}" "${label}"
                print-finish
            fi
        done
        print-finish "Finished partitioning ${device}."
    done
done
print-finish "All partitioning finished."

exit 0
