#!/usr/bin/env bash
#####################
## Zephyr          ##
##                 ##
## Install         ##
## Partition disks ##
#####################

###############
## FUNCTIONS ##
###############

## Destroy partition table
##
## @param    $1  Device
##########################
_partition-zap() {
    local device="${1:?Device missing}"
    sgdisk --zap-all "${device}"

    # Inform kernel about partitions
    partprobe "${device}"
    sleep 3
}

## Create partition
##
## @param    $1  Device
## @param    $2  Partition number
## @param    $3  Gap (free space before this partition)
## @param    $4  Size
## @param    $5  Type (luks1, luks2, efi, msr, win, linux)
## @param    $6  Label
##########################################################
_partition-create() {
    local device="${1:?Device missing}"
    local number="${2:?Partition number missing}"
    local gap="${3:?Gap size missing}"
    local size="${4:?Partition size missing}"
    local type="${5:?Partition type missing}"
    local label="${6:?Partition label missing}"
    local type_code

    case "${type}" in
        luks1|luks2) type_code=8309 ;;
        efi) type_code=ef00 ;;
        msr) type_code=0c01 ;;
        win) type_code=0700 ;;
        linux) type_code=8300 ;;
        *)
            print-error Unsupported type: "${type}"
            return 1
            ;;
    esac

    sgdisk -n "${number}:+${gap}:+${size}" -t "0:${type_code}" -c "0:${label}" "${device}"

    # Inform kernel about partitions
    partprobe "${device}"
    sleep 3
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-root

profile="${1:?Profile missing}"
shift

# Maps
map_files=()
for map in "${@}"; do
    # shellcheck disable=SC2310,SC2311
    if file=$(cfg-get "${profile}" "install/disk-maps/${map}"); then
        map_files+=("${file}")
    fi
done
[[ -z "${map_files[*]}" ]] && error-exit No maps found

# Loop through maps
for map_file in "${map_files[@]}"; do
    print-section Disks and partitions
    lsblk -o NAME,LABEL,FSTYPE,SIZE,MODEL -e7,11

    print-section Parsed disk map
    sed -r -e '/^\s*$/ d' -e '/\s*#/ d' "${map_file}"
    echo
    read -rp "WARNING! Disks in map will be erased! Proceed? Type 'YES': "
    [[ ${REPLY} != YES ]] && error-exit Aborted.

    # Loop through disks
    for line in $(cfg-read "${map_file}" DISKS); do
        IFS=$' \t' read -r name device _ <<< "${line}"
        print-section Partition "${device}"

        print-header Destroy partition table on "${device}" "(${name})..."
        _partition-zap "${device}"
        print-finish

        # Loop through partitions
        for part_line in $(cfg-read "${map_file}" "PARTITIONS_${name}"); do
            IFS=$' \t' read -r number gap size type label <<< "${part_line}"
            print-header Create partition: "${label}..."
            _partition-create "${device}" "${number}" "${gap}" "${size}" "${type}" "${label}"
            print-finish
        done
        print-finish Finished partitioning "${device}"
    done
done
print-finish All partitioning finished.

exit 0
