#!/usr/bin/env bash
####################
## Zephyr         ##
##                ##
## Runner         ##
## Customizations ##
####################

# Directories to scan for modules (order matters)
exec_dir=(
    system
    packages
    services
    shell
    tools
    apps
    gnome
    other
)

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"

# Parse options
profile="${1?:"Profile missing"}"
shift
whitelist=()
blacklist=()
# Get white/blacklist from CLI
for arg in "${@}"; do
    # Check first character
    if [[ "${arg:0:1}" == "~" ]]; then
        # Remove first char
        arg="${arg#?}"
        blacklist+=("${arg}")
    else
        whitelist+=("${arg}")
    fi
    shift
done
# Merge white/blacklist with config
IFS="," read -r -a whitelist_cfg <<<"${MODULE_WHITELIST}"
IFS="," read -r -a blacklist_cfg <<<"${MODULE_BLACKLIST}"
if [[ -z "${whitelist[*]}" && -n "${whitelist_cfg[*]}" ]]; then
    whitelist=("${whitelist_cfg[@]}")
fi
blacklist=("${blacklist[@]}" "${blacklist_cfg[@]}")

for dir in "${exec_dir[@]}"; do
    # Category blacklisted --> skip whole category
    if printf "%s\0" "${blacklist[@]}" | grep -qFxz "${dir}"; then
        continue
    fi

    # Is whole category whitelisted?
    category_whitelisted=
    if printf "%s\0" "${whitelist[@]}" | grep -qFxz "${dir}"; then
        category_whitelisted=1
    fi

    # Loop through modules
    while IFS= read -r -d '' path; do
        module=$(basename "${path}")

        # Module blacklisted --> skip
        if printf "%s\0" "${blacklist[@]}" | grep -qFxz "${module}"; then
            continue
        fi

        # Category not whitelisted and whitelist is provided and module is not on it --> skip
        if  [[ -z "${category_whitelisted}" ]] && [[ -n "${whitelist[*]}" ]] && ! printf "%s\0" "${whitelist[@]}" | grep -qFxz "${module}"; then
            continue
        fi

        # Run module
        print-section "${module}"
        if ! "${path}" "${profile}"; then
            print-error Error! Module: "${module}" failed!
            exit 1
        fi
    done < <(find "${PATH_SCRIPTS_CUSTOMIZE}/${dir}" -type f -executable -print0 | sort -z || true)
done

exit 0
