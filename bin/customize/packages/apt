#!/usr/bin/env bash
############
## Zephyr ##
##        ##
## Config ##
## APT    ##
############

###############
## FUNCTIONS ##
###############

## Parse install packages
##
## @param   $1  Global/Local
## @param   $2  Config file
############################
_parse-install-packages() {
    local selector="${1:?Selector missing}"
    local cfg_file="${2:?Config file missing}"
    local line package repo

    # shellcheck disable=SC2310
    if is-empty-section "${cfg_file}" apt-install; then
        return 0
    fi

    print-status Parse packages to install "[${selector}]..."
    # shellcheck disable=SC2310,SC2311
    for line in $(cfg-read "${cfg_file}" apt-install); do
        IFS=$' \t' read -r package repo <<< "${line}"
        [[ -n "${repo}" ]] && repos+=("${repo}")
        packages_install+=("${package}")
    done
    print-finish
}

## Parse remove packages
##
## @param   $1  Global/Local
## @param   $2  Config file
############################
_parse-remove-packages() {
    local selector="${1:?Selector missing}"
    local cfg_file="${2:?Config file missing}"
    local package

    # shellcheck disable=SC2310
    if is-empty-section "${cfg_file}" apt-remove; then
        return 0
    fi

    print-status Parse packages to remove "[${selector}]..."
    # shellcheck disable=SC2310,SC2311
    for package in $(cfg-read "${cfg_file}" apt-remove); do
        packages_remove+=("${package}")
    done
    print-finish
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-not-root

profile="${1:?Profile missing}"

# Parse packages
repos=()
packages_install=()
packages_remove=()
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" packages/global.cfg); then
    _parse-install-packages global "${file}"
    _parse-remove-packages global "${file}"
fi
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" packages/local.cfg); then
    _parse-install-packages local "${file}"
    _parse-remove-packages local "${file}"
fi

# Deduplicate list of repositories
[[ -n "${repos[*]}" ]] && mapfile -t repos < <(printf "%s\n" "${repos[@]}" | sort -u || true)
for apt_repo in "${repos[@]}"; do
    print-header Add APT repo: "${apt_repo}..."
    sudo add-apt-repository --yes --no-update "${apt_repo}"
    print-finish
done

print-header Update APT cache...
sudo apt-get update
print-finish

if [[ -n "${packages_install[*]}" ]]; then
    print-header Install "${packages_install[*]}..."
    sudo apt-get install --yes --no-install-recommends "${packages_install[@]}"
    print-finish
fi

if [[ -n "${packages_remove[*]}" ]]; then
    print-header Remove "${packages_remove[*]}..."
    sudo apt-get remove --yes --purge --autoremove "${packages_remove[@]}"
    print-finish
fi

print-header Upgrade packages...
sudo apt-get upgrade --yes
print-finish

print-header Run APT clean...
sudo apt-get clean
print-finish

exit 0
