#!/usr/bin/env bash
##################
## Zephyr       ##
##              ##
## Config       ##
## Certificates ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-not-root

profile="${1:?"Profile missing"}"
root_ca_name=
root_ca_subject=
mok_key_name=
mok_key_subject=

# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" system/global.cfg); then
    cfg-eval "${file}" certificate
fi
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" system/local.cfg); then
    cfg-eval "${file}" certificate
fi

[[ -z "${root_ca_name}" ]] && exit 1
[[ -z "${root_ca_subject}" ]] && exit 1
[[ -z "${mok_key_name}" ]] && exit 1
[[ -z "${mok_key_subject}" ]] && exit 1

# Machine Owner Key (MOK)
#########################
# Check if this is an EFI system
if [[ -e /sys/firmware/efi ]]; then
    print-header "Install mokutil..."
    sudo apt-get install --yes --no-install-recommends mokutil
    print-finish

    # Check SecureBoot is enabled
    if ! mokutil --sb-state; then
        print-finish "SecureBoot not enabled/available, skipping MOK certificate"
    else
        key_created=
        print-status "Create MOK private key..."
        if sudo test ! -e "/etc/ssl/private/${mok_key_name}.key"; then
            sudo openssl genpkey \
                -algorithm rsa \
                -pkeyopt rsa_keygen_bits:4096 \
                -out "/etc/ssl/private/${mok_key_name}.key"
            key_created=1
            print-finish
        else
            print-finish "Key found, skipped"
        fi

        print-header "Create MOK certificate..."
        if [[ ! -e "/etc/ssl/certs/${mok_key_name}.der" || -n "${key_created}" ]]; then
            sudo openssl req \
                -new \
                -x509 \
                -sha256 \
                -key "/etc/ssl/private/${mok_key_name}.key" \
                -outform DER \
                -out "/etc/ssl/certs/${mok_key_name}.der" \
                -days 3650 \
                -subj "${mok_key_subject}"
            print-finish
        else
            print-finish "Certificate found, skipped"
        fi

        print-header "Enroll MOK certificate..."
        cert_fingerprint=$(openssl x509 -noout -sha1 -fingerprint -inform DER -in "/etc/ssl/certs/${mok_key_name}.der" | cut -d= -f2 | tr '[:upper:]' '[:lower:]')
        # grep -q exits as a match is found --> a pipe needs a reader and writer process also --> avoid grep -q in a pipe
        if ! mokutil --list-enrolled | grep -s "SHA1 Fingerprint: ${cert_fingerprint}" >/dev/null; then
            sudo mokutil --import "/etc/ssl/certs/${mok_key_name}.der"
            sudo mokutil --timeout -1
            print-finish
        else
            print-finish "Already enrolled, skipped"
        fi
    fi
fi

# Self-signed root CA certificate
#################################
key_created=
cert_created=
print-status "Create ROOT CA private key..."
if sudo test ! -e "/etc/ssl/private/${root_ca_name}.key"; then
    sudo openssl genpkey \
        -algorithm rsa \
        -pkeyopt rsa_keygen_bits:4096 \
        -out "/etc/ssl/private/${root_ca_name}.key"
    key_created=1
    print-finish
else
    print-finish "Key found, skipped"
fi

print-status "Create self-signed ROOT CA certificate..."
if [[ ! -e "/usr/local/share/ca-certificates/${root_ca_name}.crt" || -n "${key_created}" ]]; then
    sudo openssl req \
        -new \
        -x509 \
        -sha512 \
        -extensions v3_ca \
        -addext "keyUsage=critical,keyCertSign,cRLSign" \
        -key "/etc/ssl/private/${root_ca_name}.key" \
        -out "/usr/local/share/ca-certificates/${root_ca_name}.crt" \
        -days 3650 \
        -subj "${root_ca_subject}"
    cert_created=1
    print-finish
else
    print-finish "Certificate found, skipped"
fi

# Update ca-cert
if [[ -n "${cert_created}" ]]; then
    print-header "Install root CA certificate to system..."
    sudo update-ca-certificates
    print-finish

    # shellcheck disable=SC2310,SC2311
    if file=$(cfg-get "${profile}" system/firefox-policies.json); then
        print-status "Install root CA certificate to Firefox..."
        sudo mkdir -p /usr/lib/firefox/distribution
        sudo cp --no-preserve=mode,ownership "${file}" /usr/lib/firefox/distribution/policies.json
        print-finish
    fi
fi

exit 0
