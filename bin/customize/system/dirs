#!/usr/bin/env bash
#########################
## ES-Ubuntu           ##
##                     ##
## Config              ##
## Directory structure ##
#########################

###############
## FUNCTIONS ##
###############

## Create directories
##
## @param   $1  Global/Local
## @param   $2  Config file
############################
_dirs-create() {
    local selector="${1:?"Selector missing"}"
    local cfg_file="${2:?"Config file missing"}"

    print-status "Create dirs [${selector}]..."
    for line in $(cfg-read "${cfg_file}" dirs-create); do
        IFS=$' \t' read -r path owner <<< "${line}"
        # eval line to let the shell expand tilde and env vars
        path=$(eval echo "${path}")
        owner=$(eval echo "${owner}")
        sudo mkdir -p "${path}"
        [[ -n "${owner}" ]] && sudo chown "${owner}:${owner}" "${path}"
    done
    print-finish
}

## Remove directories
##
## @param   $1  Global/Local
## @param   $2  Config file
############################
_dirs-remove() {
    local selector="${1:?"Selector missing"}"
    local cfg_file="${2:?"Config file missing"}"

    print-status "Remove dirs [${selector}]..."
    for line in $(cfg-read "${cfg_file}" dirs-remove); do
        # eval line to let the shell expand tilde and env vars
        arg=$(eval echo "${line}")
        sudo rm -rf "${arg}"
    done
    print-finish
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-not-root

profile="${1:?"Profile missing"}"

if file=$(cfg-get "${profile}" system/global.cfg); then
    _dirs-create global "${file}"
    _dirs-remove global "${file}"
fi
if file=$(cfg-get "${profile}" system/local.cfg); then
    _dirs-create local "${file}"
    _dirs-remove local "${file}"
fi

print-status "Set permission on /home..."
sudo chown -R "${USER}:${USER}" ~
chmod -R o-rwx ~
print-finish

exit 0
