#!/usr/bin/env bash
################
## ES-Ubuntu  ##
##            ##
## Config     ##
## Virtualbox ##
################

###############
## FUNCTIONS ##
###############

## Config VirtualBox
##
## @param   $1  Global/Local
## @param   $2  Config file
############################
_config() {
    local selector="${1:?"Selector missing"}"
    local cfg_file="${2:?"Config file missing"}"

    print-status "Config VirtualBox [${selector}]..."
    # vboxmanage configs
    for line in $(cfg-read "${cfg_file}" vboxmanage); do
        IFS=$' \t' read -r cfg_name cfg_value <<< "${line}"
        [[ -z "${cfg_name}" || -z "${cfg_value}" ]] && continue

        # eval value to let the shell expand tilde and env vars
        cfg_value=$(eval echo "${cfg_value}")
        vboxmanage setproperty "${cfg_name}" "${cfg_value}"
    done
    # Other configs
    cfg-eval "${cfg_file}" settings
    # Read VM info
    cfg-eval "${cfg_file}" virtmachines
    print-finish
}

## Register virtual machines
##
## @param   $1  Global/Local
## @param   $2  Config dir
############################
_register() {
    local selector="${1:?"Selector missing"}"
    local cfg_dir="${2:?"Config dir missing"}"

    print-status "Register VMs [${selector}]..."
    # Get & create machine folder
    mkdir -p "${VM_LOCAL_DIR:-~/.config/VirtualBox}"
    # Register VMs
    registered_vms=$(vboxmanage list vms)
    for def in "${vm[@]:-}"; do
        IFS="@" read -r vm_dir uuid <<<"${def}"

        # Check if already registered
        if ! grep -qs "${uuid}" <<<"${registered_vms}"; then
            [[ -e "${cfg_dir}/${vm_dir}" ]] || continue

            cp -r --no-preserve=mode,ownership "${cfg_dir}/${vm_dir}" "${VM_LOCAL_DIR:-~/.config/VirtualBox}"
            find "${VM_LOCAL_DIR:-~/.config/VirtualBox}/${vm_dir}" -name "*.vbox" -exec vboxmanage registervm '{}' \;
        fi
    done
    print-finish
}

##################
## SCRIPT START ##
##################

# Strict mode
set -euo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bootstrap.sh"
check-not-root || exit 1

profile="${1:?"Profile missing"}"

print-status "Load vbox modules to kernel..."
sudo modprobe vboxdrv
sudo modprobe vboxnetadp
sudo modprobe vboxnetflt
print-finish

if file=$(cfg-get "${profile}" apps/virtualbox/vboxconfig.global); then
    _config global "${file}"
fi
if file=$(cfg-get "${profile}" apps/virtualbox/vboxconfig.local); then
    _config local "${file}"
fi
if dir=$(cfg-get "${profile}" apps/virtualbox/vm.global); then
    _register global "${dir}"
fi
if dir=$(cfg-get "${profile}" apps/virtualbox/vm.local); then
    _register local "${dir}"
fi

exit 0
