#!/usr/bin/env bash
################
## Zephyr     ##
##            ##
## Config     ##
## Virtualbox ##
################

###############
## FUNCTIONS ##
###############

## Config VirtualBox
##
## @param   $1  Global/Local
## @param   $2  Config file
############################
_config() {
    local selector="${1:?Selector missing}"
    local cfg_file="${2:?Config file missing}"
    local line cfg_name cfg_value

    print-status Config VirtualBox "[${selector}]..."
    # vboxmanage configs
    # shellcheck disable=SC2310,SC2311
    for line in $(cfg-read "${cfg_file}" virtualbox-vboxmanage); do
        IFS=$' \t' read -r cfg_name cfg_value <<< "${line}"
        [[ -z "${cfg_name}" || -z "${cfg_value}" ]] && continue

        # eval value to let the shell expand tilde and env vars
        cfg_value=$(eval echo "${cfg_value}")
        vboxmanage setproperty "${cfg_name}" "${cfg_value}"
    done
    # Other configs
    cfg-eval "${cfg_file}" virtualbox-settings
    # Read VM info
    cfg-eval "${cfg_file}" virtualbox-virtmachines
    print-finish
}

## Register virtual machines
##
## @param   $1  Global/Local
## @param   $2  Config dir
############################
_register() {
    local selector="${1:?Selector missing}"
    local cfg_dir="${2:?Config dir missing}"
    local registered_vms def vm uuid

    # Get & create machine folder
    mkdir -p "${VM_LOCAL_DIR:-~/.config/VirtualBox}"
    # Register VMs
    registered_vms=$(vboxmanage list vms)
    for def in "${virtmachines[@]}"; do
        IFS=@ read -r vm uuid <<<"${def}"
        print-status Register VM: "${vm}" "[${selector}]..."
        # Check if already registered
        if ! grep -qs "${uuid}" <<<"${registered_vms}"; then
            [[ -e "${cfg_dir}/${vm}" ]] || continue

            cp -r --no-preserve=mode,ownership "${cfg_dir}/${vm}" "${VM_LOCAL_DIR:-~/.config/VirtualBox}"
            find "${VM_LOCAL_DIR:-~/.config/VirtualBox}/${vm}" -name "*.vbox" -exec vboxmanage registervm {} \;
            print-finish
        else
            print-finish Already registered, skip.
        fi
    done
}

##################
## SCRIPT START ##
##################

# Strict mode
set -eufo pipefail
IFS=$'\n\t'

source "${PROJECT_ROOT}/bin/bootstrap.sh"
check-not-root

# Options
profile="${1:?Profile missing}"
repo=
version=
gpg_key_url=
gpg_key_fingerprint=
gpg_key_path=

# Read config file, get options
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" apps/global.cfg); then
    cfg-eval "${file}" virtualbox
fi
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" apps/local.cfg); then
    cfg-eval "${file}" virtualbox
fi
[[ -z "${repo}" ]] && error-exit Missing repo
[[ -z "${version}" ]] && error-exit Missing version
if grep -qs signed-by= <<<"${repo}"; then
    gpg_key_path=$(sed -r 's@.*\[(.*)\].*@\1@' <<<"${repo}" | sed -r 's@.*signed-by=(\S+).*$@\1@')
fi

print-header Add Oracle VirtualBox GPG key...
if [[ -n "${gpg_key_path}" && -n "${gpg_key_url}" ]]; then
    tmp_file=$(mktemp)
    curl --disable --progress-bar -o "${tmp_file}" --url "${gpg_key_url}"
    fpr=$(gpg --show-keys --with-colons "${tmp_file}" | sed -n '/^pub:/,+1 p' | grep '^fpr' | cut -d: -f10)
    if [[ -n "${gpg_key_fingerprint}" && "${fpr}" != "${gpg_key_fingerprint}" ]]; then
        error-exit Bad GPG key fingerprint, exiting
    fi
    sudo install --mode=0644 --no-target-directory "${tmp_file}" "${gpg_key_path}"
    print-finish
else
    print-finish GPG key not provided, skip.
fi

print-header Add Oracle VirtualBox repo...
# We need to manually write sources, as add-apt-repository does not support the signed-by option
echo "${repo}" | sudo tee /etc/apt/sources.list.d/oracle-virtualbox.list > /dev/null
sudo apt update
print-finish

install-apt "virtualbox-${version}"

print-header Load vbox modules to kernel...
sudo /sbin/vboxconfig
print-finish

virtmachines=()
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" apps/global.cfg); then
    _config global "${file}"
fi
# shellcheck disable=SC2310,SC2311
if dir=$(cfg-get "${profile}" apps/vbox/vm.global.d); then
    _register global "${dir}"
fi

virtmachines=()
# shellcheck disable=SC2310,SC2311
if file=$(cfg-get "${profile}" apps/local.cfg); then
    _config local "${file}"
fi
# shellcheck disable=SC2310,SC2311
if dir=$(cfg-get "${profile}" apps/vbox/vm.local.d); then
    _register local "${dir}"
fi

exit 0
